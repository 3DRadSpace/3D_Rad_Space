<?xml version="1.0"?>
<doc>
    <assembly>
        <name>3DRadSpaceDll</name>
    </assembly>
    <members>
        <member name="T:_3DRadSpaceDll.Camera">
            <summary>
            3D Camera class. Allows drawing three dimensinal scenes.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Camera.#ctor(System.String,System.Boolean,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Single,System.Single)">
            <summary>
            Camera object constructor.
            </summary>
            <param name="name">Object name.</param>
            <param name="Enabled">If camera is enabled.</param>
            <param name="Pos">Camera position.</param>
            <param name="Rot">Camera rotation. Also used to calculate the target.</param>
            <param name="Targ">Camera Target. The point the camera is looking at.</param>
            <param name="UpDir">Camera up direction.</param>
            <param name="FOV">Field of view in radians.</param>
            <param name="nearplane">Minumum draw distance.</param>
            <param name="farplane">Maximum draw distance.</param>
        </member>
        <member name="M:_3DRadSpaceDll.Camera.#ctor(System.String,System.Boolean,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Single,System.Single)">
            <summary>
            Creates a Camera object with the specified arguments.
            </summary>
            <param name="name">Objet name.</param>
            <param name="Enabled">If camera is enabled.</param>
            <param name="Pos">Position</param>
            <param name="Rot">Camera rotation.Also used to calculate the target.</param>
            <param name="UpDir">Camera up direction.</param>
            <param name="FOV">Field of view in radians</param>
            <param name="nearplane">Minumum draw distance</param>
            <param name="farplane">Maximum draw distance</param>
        </member>
        <member name="M:_3DRadSpaceDll.Camera.#ctor(System.String,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Single,System.Single)">
            <summary>
            Camera constructor used in the editor.
            </summary>
            <param name="name"></param>
            <param name="Pos"></param>
            <param name="Target"></param>
            <param name="FOV"></param>
            <param name="nearplane"></param>
            <param name="farplane"></param>
        </member>
        <member name="M:_3DRadSpaceDll.Camera.#ctor">
            <summary>
            Empty constructor. Values are mostly default.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.Camera.model">
            <summary>
            Expected to be loaded by the game editor. Not used in 3DRadSpacePlayer.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.Camera.DeltaPos">
            <summary>
            Difference between 'chased object' and Camera position.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Camera.Load(Microsoft.Xna.Framework.Content.ContentManager)">
            <summary>
            Loads the object. In this cases, initializes the DeltaPos used when the camera is 'chasing' an object.
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:_3DRadSpaceDll.Camera.EditorDraw(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Nullable{Microsoft.Xna.Framework.Matrix},System.Nullable{Microsoft.Xna.Framework.Matrix})">
            <summary>
            Drawing code for the editor.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.Camera.CameraTarget">
            <summary>
            Look at point.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.Camera.CameraRotation">
            <summary>
            Camera Rotation. This is a normalized 3D Vector (with the lenght equal to 1)
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.Camera.FOV">
            <summary>
            Field of view (Measured in radians).
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.Camera.ScreenSize">
            <summary>
            Screen size. Used to calculate the projection's aspect ratio.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Camera.FOVDegrees">
            <summary>
            Field of view angle in degrees.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.Camera.MinDrawDist">
            <summary>
            Minimum drawing distance. A recommended value is 0.1f.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Camera.MaxDrawDist">
            <summary>
            Maximum drawing distance.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Camera.Update(Microsoft.Xna.Framework.Input.MouseState,Microsoft.Xna.Framework.Input.KeyboardState,Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates the Camera object. In this case, the Camera object is affected by it's 'relationship(s)'.
            </summary>
            <param name="mouse">Not used</param>
            <param name="keyboard">Not used</param>
            <param name="time">Not used</param>
        </member>
        <member name="M:_3DRadSpaceDll.Camera.Draw(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Camera drawing for game code. This method doesn't override the GameObject's Draw function. :thinking:
            </summary>
            <param name="view">Uses it's own view</param>
            <param name="projection"></param>
        </member>
        <member name="T:_3DRadSpaceDll.Camera2D">
            <summary>
            Camera class for 2D projects. Used to draw 2D scenes.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Camera2D.#ctor(System.String,System.Boolean,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Camera2D constructor.
            </summary>
            <param name="name">Object name</param>
            <param name="enabled">Is the camera drawing the scene?</param>
            <param name="Pos">Position</param>
            <param name="Size">Size</param>
        </member>
        <member name="M:_3DRadSpaceDll.Camera2D.#ctor">
            <summary>
            Empty Camera2D Constructor.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Camera2D.Push(System.Object)">
            <summary>
            Adds an object to be drawn by the camera.
            </summary>
            <param name="obj">Object to be added.</param>
        </member>
        <member name="M:_3DRadSpaceDll.Camera2D.Top">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:_3DRadSpaceDll.Camera2D.Pop">
            <summary>
            
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Camera2D.DrawingBounds">
            <summary>
            Camera drawing bounds.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Camera2D.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Nullable{Microsoft.Xna.Framework.Matrix},System.Nullable{Microsoft.Xna.Framework.Matrix})">
            <summary>
            Draws the entire scene.
            </summary>
            <param name="spriteBatch">Game's sprite batch.</param>
            <param name="view">Not used, use the null value.</param>
            <param name="projection">Not used, use the null value.</param>
        </member>
        <member name="T:_3DRadSpaceDll.Counter">
            <summary>
            
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Counter.InitialValue">
            <summary>
            The value this object was initialized with.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.Counter.Value">
            <summary>
            Stored value.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.Counter.Increment">
            <summary>
            Increment value. (can be negative)
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.Counter.File">
            <summary>
            File to get the value saved.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Counter.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Counter.#ctor(System.String,System.Boolean,System.Single,System.Single,System.String)">
            <summary>
            Main constructor.
            </summary>
            <param name="name">Object name</param>
            <param name="enabled">Can this object `trigger`?</param>
            <param name="increment">Addidion value. Negatives are also allowed.</param>
            <param name="initialv">Start value.</param>
            <param name="file">File to save the stored value.</param>
        </member>
        <member name="M:_3DRadSpaceDll.Counter.#ctor(System.String,System.Boolean,System.Single,System.String)">
            <summary>
            Constructor for use if loading from a file.
            </summary>
            <param name="name">Object name</param>
            <param name="enabled">Can this object get triggered?</param>
            <param name="increment">Increment value</param>
            <param name="f">File</param>
        </member>
        <member name="M:_3DRadSpaceDll.Counter.#ctor(System.Single)">
            <summary>
            Constrcuctor allowing setting a private value.
            </summary>
            <param name="i">Initial</param>
        </member>
        <member name="M:_3DRadSpaceDll.Counter.SaveFile">
            <summary>
            Saves the stored value into the specified file.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Counter.Load(Microsoft.Xna.Framework.Content.ContentManager)">
            <summary>
            Used only in 3DRadSpacePlayer.
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:_3DRadSpaceDll.Counter.LoadFile">
            <summary>
            Loads the saved number from the specified file.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Counter.Trigger">
            <summary>
            Increment the value.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Counter.FileIOSafe">
            <summary>
            Only used in 3DRad editor IO
            </summary>
        </member>
        <member name="T:_3DRadSpaceDll.CustomObjectInfo">
            <summary>
            Represents information and metadata about the custom object.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.CustomObjectInfo.#ctor(System.String,System.String,System.Single)">
            <summary>
            Constructor of the CustomObjectInfo class.
            </summary>
            <param name="name">editor name</param>
            <param name="creator">author name</param>
            <param name="v">version</param>
        </member>
        <member name="P:_3DRadSpaceDll.CustomObjectInfo.Author">
            <summary>
            Represents the author or the object.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.CustomObjectInfo.Version">
            <summary>
            Represents the version of the object assembly.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.CustomObjectInfo.EditorName">
            <summary>
            Represents the common name used in the editor.
            </summary>
        </member>
        <member name="T:_3DRadSpaceDll.KeyInputType">
            <summary>
            Defines the input states.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.KeyInputType.Released">
            <summary>
            The key is up.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.KeyInputType.Pressed">
            <summary>
            The key is being pressed.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.KeyInputType.Holding">
            <summary>
            The key is being pressed for one than one frame.
            </summary>
        </member>
        <member name="T:_3DRadSpaceDll.KeyInput">
            <summary>
            Input key used for the EventOnKey and related objects.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.KeyInput.#ctor(Microsoft.Xna.Framework.Input.Keys,_3DRadSpaceDll.KeyInputType)">
            <summary>
            Main constructor of KeyInput
            </summary>
            <param name="key">Specified keyboard button.</param>
            <param name="state">Specified state.</param>
        </member>
        <member name="F:_3DRadSpaceDll.KeyInput.Key">
            <summary>
            The key
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.KeyInput.State">
            <summary>
            The key state.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.KeyInput.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:_3DRadSpaceDll.KeyEvent">
            <summary>
            Triggers when the key is up/down/ hold for enough time.
            </summary>
            <param name="sender">EOK sender.</param>
            <param name="delta">DeltaTime.</param>
        </member>
        <member name="T:_3DRadSpaceDll.OnKeyHold">
            <summary>
            Triggers when the key is being pressed and when the EventOnKey.Key.State is equal to KeyInputType.Holding
            </summary>
            <param name="sender"></param>
            <param name="Time"></param>
            <param name="deltaTime"></param>
        </member>
        <member name="T:_3DRadSpaceDll.EventOnKey">
            <summary>
            Allows raising events whenever a key is being pressed.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.EventOnKey.#ctor">
            <summary>
            Empty EOK constructor.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.EventOnKey.#ctor(System.String,System.Boolean,_3DRadSpaceDll.KeyInput,System.UInt32)">
            <summary>
            Main EOK constructor.
            </summary>
            <param name="name">Object Name.</param>
            <param name="enabled">Will the event get raised?</param>
            <param name="input">Defines the key and input type.</param>
            <param name="time_necesarry">Time necessary for holding down the button in order to trigger the button.</param>
        </member>
        <member name="F:_3DRadSpaceDll.EventOnKey.Key">
            <summary>
            Defines the key and the expected key state.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.EventOnKey.HoldingTime">
            <summary>
            Defined the time in milliseconds how much time is needed to hold down the given key to trigger the event.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.EventOnKey.TotalHoldTime">
            <summary>
            Defnes how much time the button is being hold.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.EventOnKey.Behiavours">
            <summary>
            The event defined in the editor.
            </summary>
        </member>
        <member name="E:_3DRadSpaceDll.EventOnKey.OnKeyTrigger">
            <summary>
            Triggers when the inputs are equal to the given conditions.
            </summary>
        </member>
        <member name="E:_3DRadSpaceDll.EventOnKey.OnKeyHolding">
            <summary>
            Triggers when the key is being hold.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.EventOnKey.Update(Microsoft.Xna.Framework.Input.MouseState,Microsoft.Xna.Framework.Input.KeyboardState,Microsoft.Xna.Framework.GameTime)">
            <summary>
            Raises the defined event on the given conditions.
            </summary>
            <param name="mouse">Mouse input</param>
            <param name="keyboard">Keyboard input</param>
            <param name="time">Game time used to get the dt value</param>
        </member>
        <member name="T:_3DRadSpaceDll.BoundingObject">
            <summary>
            Bounding objects types.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.BoundingObject.None">
            <summary>
            Not defined.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.BoundingObject.Box">
            <summary>
            AABB collision-type box
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.BoundingObject.Sphere">
            <summary>
            A 3D Sphere
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.BoundingObject.Plane">
            <summary>
            A 3D Plane
            </summary>
        </member>
        <member name="T:_3DRadSpaceDll.OnBoundingObjectEnter">
            <summary>
            Event raised when a `collision` is happening.
            </summary>
            <param name="sender">Always a EOL (EventOnLocation) </param>
            <param name="boundingObject">Type of the bounding object</param>
            <param name="Object_Inside">Object inside.</param>
        </member>
        <member name="T:_3DRadSpaceDll.EventOnLocation">
            <summary>
            Allows raising events when a object is within the specified bounding object.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.EventOnLocation.#ctor">
            <summary>
            Empty EventOnLocation constructor.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.EventOnLocation.#ctor(System.String,System.Boolean,System.Boolean,Microsoft.Xna.Framework.BoundingBox)">
            <summary>
            Creates a EventOnLocation based on the given Microsoft.Xna.Framework.BoundingBox/
            </summary>
            <param name="name">Name of the object</param>
            <param name="enabled">Checks if the collisoin events will be raised.</param>
            <param name="visible_editor">Checks if the object is visible in the editor</param>
            <param name="box">Bounding box.</param>
        </member>
        <member name="M:_3DRadSpaceDll.EventOnLocation.#ctor(System.String,System.Boolean,System.Boolean,Microsoft.Xna.Framework.BoundingSphere)">
            <summary>
            Creates a EventOnLocation based on the given BoundingSphere
            </summary>
            <param name="name">Name of the object</param>
            <param name="enabled">Checks if the collisoin events will be raised.</param>
            <param name="visible_editor">Checks if the object is visible in the editor</param>
            <param name="sphere">Bounding sphere.</param>
        </member>
        <member name="M:_3DRadSpaceDll.EventOnLocation.#ctor(System.String,System.Boolean,System.Boolean,Microsoft.Xna.Framework.Plane)">
            <summary> 
            Creates a EventOnLocation based on the given Plane
            </summary>
            <param name="name">Name of the object</param>
            <param name="enabled">Checks if the collisoin events will be raised.</param>
            <param name="visible_editor">Checks if the object is visible in the editor</param>
            <param name="plane">Bounding plane</param>
        </member>
        <member name="E:_3DRadSpaceDll.EventOnLocation.OnObjectInside">
            <summary>
            Raised when a object is inside the bounding object.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.EventOnLocation.BoundingType">
            <summary>
            Sets the bounding type for the detection.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.EventOnLocation.BoundingSphere">
            <summary>
            Bounding sphere.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.EventOnLocation.BoundingBox">
            <summary>
            Bounding box.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.EventOnLocation.BoundingPlane">
            <summary>
            Plane made up of
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.EventOnLocation.ColidingObjects">
            <summary>
            A list containing the objects that are being detected by the box.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.EventOnLocation.VisibleInEditor">
            <summary>
            If yes, shows a green box marking the bounding zone.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.EventOnLocation.Cube">
            <summary>
            A green transparent cube used to mark the bounding cube in the editor.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.EventOnLocation.Sphere">
            <summary>
            A green trransparent sphere used to mark the bounding sphere in the editor.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.EventOnLocation.Behiavours">
            <summary>
            The event defined in the editor.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.EventOnLocation.LoadModels(Microsoft.Xna.Framework.Content.ContentManager)">
            <summary>
            Editor only - Loads the models used to mark the bounding volume
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:_3DRadSpaceDll.EventOnLocation.Update(Microsoft.Xna.Framework.Input.MouseState,Microsoft.Xna.Framework.Input.KeyboardState,Microsoft.Xna.Framework.GameTime)">
            <summary>
            
            </summary>
            <param name="mouse"></param>
            <param name="keyboard"></param>
            <param name="time"></param>
        </member>
        <member name="M:_3DRadSpaceDll.EventOnLocation.EditorDraw(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Nullable{Microsoft.Xna.Framework.Matrix},System.Nullable{Microsoft.Xna.Framework.Matrix})">
            <summary>
            Marks the bounding area in the editor.
            </summary>
            <param name="spriteBatch">Not used.</param>
            <param name="view">View Matrix.</param>
            <param name="projection">Projection Matrix.</param>
        </member>
        <member name="T:_3DRadSpaceDll.EventOnValue">
            <summary>
            You better use a Script object with a if statement.
            </summary>
        </member>
        <member name="T:_3DRadSpaceDll.ExitFade">
            <summary>
            Allows loading other projects.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.ExitFade.#ctor(System.String,System.String,Microsoft.Xna.Framework.Color,System.Int32,System.Boolean)">
            <summary>
            Main constructor of ExitFade class.
            </summary>
            <param name="name">Name of the object.</param>
            <param name="Path">Project to load.</param>
            <param name="fadecolor">Fade Color.</param>
            <param name="fadetime">Fade Time, measured in miliseconds.
            <para>Defaults to 0.</para></param>
            <param name="fade_type">Fades in or our.
            <para>true = fade in</para>
            <para>false = fade out</para></param>
        </member>
        <member name="M:_3DRadSpaceDll.ExitFade.#ctor">
            <summary>
            Empty ExitFade Constructor.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.ExitFade.Color">
            <summary>
            Fade color.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.ExitFade.Time">
            <summary>
            Time for the fade in milliseconds (ms)
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.ExitFade.FadeType">
            <summary>
            Toggles fade type. In or out.
            <para>true = fade in</para>
            <para>false = fade out</para>
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.ExitFade.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Nullable{Microsoft.Xna.Framework.Matrix},System.Nullable{Microsoft.Xna.Framework.Matrix})">
            <summary>
            Draws the fading.
            </summary>
            <param name="spriteBatch">Needed for drawing the fading.</param>
            <param name="view">Not needed.</param>
            <param name="projection">Not needed.</param>
        </member>
        <member name="M:_3DRadSpaceDll.ExitFade.Update(Microsoft.Xna.Framework.Input.MouseState,Microsoft.Xna.Framework.Input.KeyboardState,Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updated the fade alpha timer.
            </summary>
            <param name="mouse"></param>
            <param name="keyboard"></param>
            <param name="time"></param>
        </member>
        <member name="M:_3DRadSpaceDll.ExitFade.LoadProject">
            <summary>
            Allows loading other projects.
            </summary>
        </member>
        <member name="T:_3DRadSpaceDll.Fog">
            <summary>
            <para>Fog class. Allows Fog effects on Skinmeshes.</para>
            <para>Notice the missing Draw,EditorDraw and Update functions. The fields and properties are only used.</para>
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Fog.#ctor(System.String,System.Boolean,Microsoft.Xna.Framework.Color,System.Single,System.Single)">
            <summary>
            Fog class constructor.
            </summary>
            <param name="name">Object name</param>
            <param name="enabled">Is the fog effect allowed?</param>
            <param name="color"></param>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="M:_3DRadSpaceDll.Fog.#ctor">
            <summary>
            Empty Fog object constructor.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Fog.FogColor">
            <summary>
            Fog Color. Implemented from IEffectFog.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Fog.FogEnabled">
            <summary>
            Actually sets this.Enabled. Implemented from IEffectFog.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Fog.FogEnd">
            <summary>
            Fog end distance.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Fog.FogStart">
            <summary>
            Fog start distance.
            </summary>
        </member>
        <member name="T:_3DRadSpaceDll.FPVCamera">
            <summary>
            Represents a First person view camera.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.FPVCamera.CamScreenCoords">
            <summary>
            Camera rotation coordinates related to screen.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.FPVCamera.Bound">
            <summary>
            Vertical rotaition bounds.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.FPVCamera.MovementSpeed">
            <summary>
            Movement speed.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.FPVCamera.Sensibility">
            <summary>
            Mouse sensiblity.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.FPVCamera.Forward">
            <summary>
            Forward movment key.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.FPVCamera.Backward">
            <summary>
            Back movment key.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.FPVCamera.Left">
            <summary>
            Left movment key.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.FPVCamera.Right">
            <summary>
            Right movment key.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.FPVCamera.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.FPVCamera.#ctor(System.String,System.Boolean,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="enabled"></param>
            <param name="pos"></param>
            <param name="up"></param>
            <param name="look_coords"></param>
            <param name="fov"></param>
        </member>
        <member name="M:_3DRadSpaceDll.FPVCamera.#ctor(System.String,System.Boolean,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector3,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Input.Keys,Microsoft.Xna.Framework.Input.Keys,Microsoft.Xna.Framework.Input.Keys,Microsoft.Xna.Framework.Input.Keys,System.Single,System.Single)">
            <summary>
            Main camera constructor.
            </summary>
            <param name="name">Editor name.</param>
            <param name="enabled">Enables drawing or not.</param>
            <param name="pos">World position,</param>
            <param name="look_coords">View coordinates</param>
            <param name="up">Up vector</param>
            <param name="fov">Field of view in radians.</param>
            <param name="nearplane">Minimum draw distance.</param>
            <param name="farplane">Maximum draw distance.</param>
            <param name="w">Forward key</param>
            <param name="a">Left key</param>
            <param name="s">Backward key</param>
            <param name="d">Right key</param>
            <param name="mov_speed">Movement speed.</param>
            <param name="rot_speed">Rotation speed</param>
        </member>
        <member name="M:_3DRadSpaceDll.FPVCamera.Update(Microsoft.Xna.Framework.Input.MouseState,Microsoft.Xna.Framework.Input.KeyboardState,Microsoft.Xna.Framework.GameTime)">
            <summary>
            
            </summary>
            <param name="mouse"></param>
            <param name="keyboard"></param>
            <param name="time"></param>
        </member>
        <member name="M:_3DRadSpaceDll.FPVCamera.Draw(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            
            </summary>
            <param name="view"></param>
            <param name="projection"></param>
        </member>
        <member name="M:_3DRadSpaceDll.FPVCamera.EditorDraw(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Nullable{Microsoft.Xna.Framework.Matrix},System.Nullable{Microsoft.Xna.Framework.Matrix})">
            <summary>
            
            </summary>
            <param name="spriteBatch"></param>
            <param name="view"></param>
            <param name="projection"></param>
        </member>
        <member name="M:_3DRadSpaceDll.FPVCamera.SetWASDConfig">
            <summary>
            
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.FPVCamera.SetArrowConfig">
            <summary>
            
            </summary>
        </member>
        <member name="T:_3DRadSpaceDll.onDraw">
            <summary>
            Called when drawing the object
            </summary>
            <param name="drawn">The drawn object. Conversion will be needed.</param>
            <param name="spriteBatch">SpriteBatch used for drawing 2D objects</param>
            <param name="view">View Matrix used for 3D model drawing</param>
            <param name="projection">Projection Matrix used for 3D model drawing</param>
        </member>
        <member name="T:_3DRadSpaceDll.onUpdate">
            <summary>
            Called when updating.
            </summary>
            <param name="updated">The updated object</param>
            <param name="mouse">Mouse inputs</param>
            <param name="keyboard">Keyboard inputs</param>
            <param name="time">Game time input</param>
        </member>
        <member name="T:_3DRadSpaceDll.onObjectDestroy">
            <summary>
            Called when a object is being removed.
            </summary>
            <param name="obj">The removed object</param>
        </member>
        <member name="T:_3DRadSpaceDll.onObjectLoad">
            <summary>
            Called when a object resource is being loaded.
            </summary>
            <param name="obj">Object</param>
        </member>
        <member name="T:_3DRadSpaceDll.onObjectUnload">
            <summary>
            Called when a object is being unloaded.
            </summary>
            <param name="obj">Object to be unloaded</param>
        </member>
        <member name="T:_3DRadSpaceDll.GameObject">
            <summary>
            Base class for all 3DRadSpace objects.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.GameObject.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.GameObject.Name">
            <summary>
            Object Name. Used as a string identifier.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.GameObject.Tag">
            <summary>
            Tag object.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.GameObject.Enabled">
            <summary>
            Checks if object is enabled.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.GameObject.Hidden">
            <summary>
            Checks if object is being drawn.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.GameObject.Position">
            <summary>
            Object position
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.GameObject.Rotation">
            <summary>
            Rotation in a Euler angles system.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.GameObject.Behiavours">
            <summary>
            Relation with other objects
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.GameObject.SelectedObjects">
            <summary>
            Used for editor.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.GameObject.RotationQuaternion">
            <summary>
            Rotation in a Quaterion system.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.GameObject.Resource">
            <summary>
            Resource file
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.GameObject.Enable">
            <summary>
            Enables object.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.GameObject.Disable">
            <summary>
            Disables object.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.GameObject.Toggle">
            <summary>
            Switches object on/off state.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.GameObject.Show">
            <summary>
            Shows the object.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.GameObject.Hide">
            <summary>
            Hides the object.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.GameObject.Load(Microsoft.Xna.Framework.Content.ContentManager)">
            <summary>
            Loads the resource(s).
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.GameObject.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Nullable{Microsoft.Xna.Framework.Matrix},System.Nullable{Microsoft.Xna.Framework.Matrix})">
            <summary>
            Object Drawing code
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.GameObject.EditorDraw(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Nullable{Microsoft.Xna.Framework.Matrix},System.Nullable{Microsoft.Xna.Framework.Matrix})">
            <summary>
            Object draw code for the 3DRadSpace editor
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.GameObject.Update(Microsoft.Xna.Framework.Input.MouseState,Microsoft.Xna.Framework.Input.KeyboardState,Microsoft.Xna.Framework.GameTime)">
            <summary>
            Object update logic
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.GameObject.Trigger">
            <summary>
            This is specific to objects like ExitFade, NetServer,etc
            </summary>
        </member>
        <member name="E:_3DRadSpaceDll.GameObject.OnDraw">
            <summary>
            Called when object is being drawn on frame.
            </summary>
        </member>
        <member name="E:_3DRadSpaceDll.GameObject.OnUpdate">
            <summary>
            Called when object is being updated on the update logic loop.
            </summary>
        </member>
        <member name="E:_3DRadSpaceDll.GameObject.OnRemoval">
            <summary>
            Called when object is being deleted.
            </summary>
        </member>
        <member name="E:_3DRadSpaceDll.GameObject.OnObjectLoad">
            <summary>
            Called when a object resource is being loaded.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.GameObject.Finalize">
            <summary>
            Object destructor.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.GameObject.op_Implicit(_3DRadSpaceDll.GameObject)~System.Boolean">
            <summary>
            Checks if the object exists. Same as GameObject != null.
            </summary>
            <param name="o">GameObject to check.</param>
        </member>
        <member name="M:_3DRadSpaceDll.GameObject.op_Equality(_3DRadSpaceDll.GameObject,_3DRadSpaceDll.GameObject)">
            <summary>
            Checks if two GameObjects are equal.
            </summary>
            <param name="a">Left instance.</param>
            <param name="b">Right instance.</param>
            <returns>A boolean value representing the equality value.</returns>
        </member>
        <member name="M:_3DRadSpaceDll.GameObject.op_Inequality(_3DRadSpaceDll.GameObject,_3DRadSpaceDll.GameObject)">
            <summary>
            The opposite of the equality operator.
            </summary>
            <param name="a">Left instance.</param>
            <param name="b">Right instance.</param>
            <returns>A boolean value representine the inequality of the two given instances.</returns>
        </member>
        <member name="M:_3DRadSpaceDll.GameObject.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns></returns>
        </member>
        <member name="M:_3DRadSpaceDll.GameObject.GetHashCode">
            <summary>
            Returns the hash code calculated from a string representing the data inside the object.
            </summary>
            <returns>Some hash code</returns>
        </member>
        <member name="M:_3DRadSpaceDll.GameObject.ToString">
            <summary>
            Returns the object's name
            </summary>
            <returns>the object's name</returns>
        </member>
        <member name="M:_3DRadSpaceDll.GameObject.RunOnce">
            <summary>
            Runs the object one Update loop. If used on a active object it will be stopped.
            </summary>
        </member>
        <member name="T:_3DRadSpaceDll.GameSettings">
            <summary>
            Represents game's settings like fullscreen, framerate, resolution.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.GameSettings.GameScreen">
            <summary>
            Represents the resolution.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.GameSettings.MaximumFramerate">
            <summary>
            Represents the maximum frames per second values.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.GameSettings.Fullscreen">
            <summary>
            Toggles fullscreen mode.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.GameSettings.#ctor">
            <summary>
            Empty GameSettings constructor.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.GameSettings.#ctor(Microsoft.Xna.Framework.Point,System.Int32,System.Boolean)">
            <summary>
            Main GameSettings constructor.
            </summary>
            <param name="resolution"></param>
            <param name="fps"></param>
            <param name="full"></param>
        </member>
        <member name="M:_3DRadSpaceDll.GameSettings.ToString">
            <summary>
            Returns a string representing the settings.
            </summary>
            <returns>A string containing the values.</returns>
        </member>
        <member name="T:_3DRadSpaceDll.Group">
            <summary>
            Represents a group of objects. Only use as a Editor helper object. It's no use in any standalone project.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Group.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Complete group object constructor.
            </summary>
            <param name="name">Object name</param>
            <param name="objs">List ob objects</param>
        </member>
        <member name="M:_3DRadSpaceDll.Group.#ctor">
            <summary>
            Empty Group constructor.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Group.ApplyTranslation(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Applies a translation to the objects.
            </summary>
            <param name="translation"></param>
        </member>
        <member name="M:_3DRadSpaceDll.Group.ApplyRotation(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Applies a euler angle rotation to the group objects.
            </summary>
            <param name="euler"></param>
        </member>
        <member name="T:_3DRadSpaceDll.ICustomGameObject">
            <summary>
            A interface that should be used when creating custom object
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.ICustomGameObject.SaveText">
            <summary>
            Returns a string representing the object's data that will be saved in a text-format project.
            <para>The general format is:</para>
            <para>string(OBJECT_TYPE_STRING_ID) string(NAME) bool(ENABLED) ...etc</para>
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.ICustomGameObject.LoadText(System.String[])">
            <summary>
            Returns the custom object from the specified argument.
            </summary>
            <param name="text">A tokenised string array containing the data as strings.</param>
            <returns>The general format is:
            <para>string(OBJECT_TYPE_STRING_ID) string(NAME) bool(ENABLED) ...etc</para></returns>
        </member>
        <member name="M:_3DRadSpaceDll.ICustomGameObject.SaveBinary">
            <summary>
            Returns a byte array representing the object.
            </summary>
            <returns>Byte array representing the object</returns>
        </member>
        <member name="M:_3DRadSpaceDll.ICustomGameObject.LoadBinary(System.Byte[],System.String)">
            <summary>
            Created the object from the specified buffer.
            </summary>
            <param name="b">Buffer representing the entire project.</param>
            <param name="offset">Buffer offset</param>
        </member>
        <member name="T:_3DRadSpaceDll.IShader">
            <summary>
            Base interface for 3D shader effect classes
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.IShader.Effect">
            <summary>
            The class containing the shader itself
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.IShader.LoadEffect">
            <summary>
            A function used internally by the game engine.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.IShader.DrawModel(Microsoft.Xna.Framework.Graphics.Model,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Draws a model using the specified shader.
            </summary>
            <param name="mesh"></param>
            <param name="world"></param>
            <param name="view"></param>
            <param name="projection"></param>
        </member>
        <member name="M:_3DRadSpaceDll.IShader.DrawSkinmesh(_3DRadSpaceDll.Skinmesh)">
            <summary>
            Draws a skinmesh with the specified shader.
            </summary>
            <param name="skinmesh"></param>
        </member>
        <member name="T:_3DRadSpaceDll.Main">
            <summary>
            Global stuff there and over there.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Main.CultureInfo">
            <summary>
            Haha, fixes related to computers using other languages
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Main.GameObjects">
            <summary>
            Contains the objects.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Main.DrawModel(Microsoft.Xna.Framework.Graphics.Model,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,System.Boolean,Microsoft.Xna.Framework.Vector3,System.Single,System.Single)">
            <summary>
            Draws a 3D Model.
            </summary>
            <param name="model">3D Model</param>
            <param name="world">Scale*Rotaion*Position Matrix</param>
            <param name="view">View matrix</param>
            <param name="projection">Projection Matrix</param>
            <param name="FogEnabled">Allows Fog effects on the model</param>
            <param name="FogColor">Fog colour if allowed</param>
            <param name="FogStart">Fog Start Distance</param>
            <param name="FogEnd">Fog End Distance</param>
        </member>
        <member name="M:_3DRadSpaceDll.Main.DrawModelAlpha(Microsoft.Xna.Framework.Graphics.Model,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,System.Single,System.Boolean,Microsoft.Xna.Framework.Vector3,System.Single,System.Single)">
            <summary>
            Draws a model with the specified transparency.
            </summary>
            <param name="model">3D Model</param>
            <param name="world">Scale*Rotaion*Position Matrix</param>
            <param name="view">View matrix</param>
            <param name="alpha">Alpha value ranging from 0.0f to 1.0f</param>
            <param name="projection">Projection Matrix</param>
            <param name="FogEnabled">Allows Fog effects on the model</param>
            <param name="FogColor">Fog colour if allowed</param>
            <param name="FogStart">Fog Start Distance</param>
            <param name="FogEnd">Fog End Distance</param>
        </member>
        <member name="M:_3DRadSpaceDll.Main.FindObject(System.Int32)">
            <summary>
            Finds an objects after it's id.
            <para>Time complexity is O(n) since GameObjects is a linked list.</para>
            </summary>
            <param name="i">Numeric indentifier.</param>
            <returns>Returns the found object.</returns>
        </member>
        <member name="M:_3DRadSpaceDll.Main.FindObject(System.String)">
            <summary>
            Finds an objects after it's name. If objects have the same name, the object with the lowest numerical ID will be returned.
            <para>Time complexity in the worst case is about O(n^2)</para>
            </summary>
            <param name="Name">Object's name</param>
            <returns>Returns the object, else null.</returns>
        </member>
        <member name="M:_3DRadSpaceDll.Main.SetObject(System.Int32,_3DRadSpaceDll.GameObject)">
            <summary>
            Sets an object in the list.
            </summary>
            <param name="i">Object unique numeric (ID)entifier / array index
            <para>Time complexity is O(n), since the objects are stored in a linked list.</para>
            </param>
            <param name="obj">Value</param>
        </member>
        <member name="F:_3DRadSpaceDll.Main.ScreenSize">
            <summary>
            Gets or sets the screen-size used for the objects like Camera2D, ExitFade...
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.Main.RequestExit">
            <summary>
            If true, the game will close next frame.
            </summary>
        </member>
        <member name="T:_3DRadSpaceDll.ObjectBehiavour">
            <summary>
            Specifies object relationships with other ones.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.ObjectBehiavour.ObjectID">
            <summary>
            Object Identifier for the 'child' object
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.ObjectBehiavour.BehiavourID">
            <summary>
            Behiavour identifier. 0 is always default.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.ObjectBehiavour.#ctor(System.Int32,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="ID">Object identifier</param>
            <param name="beh">Behiavour ID.</param>
        </member>
        <member name="T:_3DRadSpaceDll.OpcodeEvent.Opcode">
            <summary>
            The commands that the script can execute.
            <para>Name: OPeration CODE</para>
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.OpcodeEvent.Opcode.NOP">
            <summary>
            No operation. Does nothing.
            <para>Can be used to store object IDs or other data.</para>
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.OpcodeEvent.Opcode.Start">
            <summary>
            Starts an object. 
            <para>Argument: int -object identifier.</para>
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.OpcodeEvent.Opcode.Stop">
            <summary>
            Stops an object.
            <para>Argument: int -object identifier.</para>
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.OpcodeEvent.Opcode.Toggle">
            <summary>
            Toggles the start/stop state of an object.
            <para>Argument: int -object identifier.</para>
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.OpcodeEvent.Opcode.Show">
            <summary>
            Shows an object.
            <para>Arguments: int -object identifier.</para>
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.OpcodeEvent.Opcode.Hide">
            <summary>
            Hides an object.
            <para>Arguments: int -object identifier.</para>
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.OpcodeEvent.Opcode.SetPos">
            <summary>
            Sets an object's position. 
            <para>Arguments: int - object identifier</para>
            <para>Vector3 - position.</para>
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.OpcodeEvent.Opcode.AddPos">
            <summary>
            Adds a vector to the object's position.
            <para>Arguments:</para>
            <para>int - Object identifier.</para>
            <para>Vector3 - position</para>
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.OpcodeEvent.Opcode.SetRot">
            <summary>
            Sets the object rotation.
            <para>Arguments:</para>
            <para>int - Object identifier.</para>
            <para>Vector3 - Rotation in Euler angles.</para>
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.OpcodeEvent.Opcode.AddRot">
            <summary>
            Adds a vector to the object's rotation.
            <para>Arguments:</para>
            <para>int - Object identifier.</para>
            <para>Vector3 - Rotation in Euler Angles.</para>
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.OpcodeEvent.Opcode.RunOneFrame">
            <summary>
            Starts an object, update it, then stop it.
            <para>Arguments</para>
            <para>int - Object ID</para>
            </summary>
        </member>
        <member name="T:_3DRadSpaceDll.OpcodeEvent.OpCodeCall">
            <summary>
            Calls an opcode;
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.OpcodeEvent.OpCodeCall.Opcode">
            <summary>
            
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.OpcodeEvent.OpCodeCall.Arguments">
            <summary>
            
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.OpcodeEvent.OpCodeCall.#ctor(_3DRadSpaceDll.OpcodeEvent.Opcode,System.Object[])">
            <summary>
            Main opcode constructor.
            </summary>
            <param name="op">Code.</param>
            <param name="args">Function call arguments</param>
        </member>
        <member name="M:_3DRadSpaceDll.OpcodeEvent.OpCodeCall.Call">
            <summary>
            Calls the opcode.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.OpcodeEvent.OpCodeCall.ToString">
            <summary>
            Returns a string representing the data inside the struct.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_3DRadSpaceDll.OpcodeEvent.OpCodeCall.VisibleString">
            <summary>
            Returns a visible string to be used in UIs.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_3DRadSpaceDll.OpcodeEvent.OpCodeCall.GetOpcodeText(_3DRadSpaceDll.OpcodeEvent.Opcode)">
            <summary>
            Returns a string that represents the opcode without argument.
            </summary>
            <param name="Arg">Argument Opcode</param>
            <returns></returns>
        </member>
        <member name="M:_3DRadSpaceDll.OpcodeEvent.OpCodeCall.Run(System.Collections.Generic.List{_3DRadSpaceDll.OpcodeEvent.OpCodeCall})">
            <summary>
            Runs a array
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:_3DRadSpaceDll.OpcodeEvent.OpCodeCall.CreateFromString(System.Int32,System.String[],System.Int32)">
            <summary>
            Used in I/O operations.
            </summary>
            <param name="offset">Integer offset</param>
            <param name="str">Parsed string array</param>
            <param name="stop"></param>
            <returns></returns>
        </member>
        <member name="M:_3DRadSpaceDll.OpcodeEvent.OpCodeCall.CreateFromBuffer(System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Create from a null-terminated buffer.
            </summary>
            <param name="buf"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:_3DRadSpaceDll.OpcodeEvent.OpCodeCall.ToBytes(System.Collections.Generic.List{_3DRadSpaceDll.OpcodeEvent.OpCodeCall})">
            <summary>
            used for i/o operations.
            </summary>
            <param name="opcodes"></param>
            <returns></returns>
        </member>
        <member name="T:_3DRadSpaceDll.Project">
            <summary>
            Project class for reading and saving projects.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Project.GSettings">
            <summary>
            Type of the project to open.
            </summary>
            <summary>
            Used in editor
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Project.Open(System.String)">
            <summary>
            Opens a project
            </summary>
            <param name="filename">File to open</param>
            <returns>Returns the objects.</returns>
        </member>
        <member name="M:_3DRadSpaceDll.Project.Save(System.String)">
            <summary>
            Saves a 3DRSP project
            </summary>
            <param name="filename">File path</param>
        </member>
        <member name="M:_3DRadSpaceDll.Project.Vector2String(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Converts a vector to a string in the format needed for 3DRSP projects
            </summary>
            <param name="pos">3D Vector to be converted</param>
            <returns>The needed string</returns>
        </member>
        <member name="M:_3DRadSpaceDll.Project.Vector2String(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Converts a vector to a string in the format needed for 3DRSP projects
            </summary>
            <param name="pos">2D Vector to be converted</param>
            <returns>The needed string</returns>
        </member>
        <member name="M:_3DRadSpaceDll.Project.Box2str(Microsoft.Xna.Framework.BoundingBox)">
            <summary>
            Used in I/O
            </summary>
            <param name="box">Bounding sphere</param>
            <returns></returns>
        </member>
        <member name="M:_3DRadSpaceDll.Project.Sph2str(Microsoft.Xna.Framework.BoundingSphere)">
            <summary>
            Used in I/O
            </summary>
            <param name="sph">Bounding sphere</param>
            <returns></returns>
        </member>
        <member name="M:_3DRadSpaceDll.Project.Plane2str(Microsoft.Xna.Framework.Plane)">
            <summary>
            Used in I/O
            </summary>
            <param name="p">Bounding plane</param>
            <returns></returns>
        </member>
        <member name="M:_3DRadSpaceDll.Project.UnloadObjects">
            <summary>
            Clears native memory used by the game.
            <para>This will put pressure to the C#'s garbage collection system.</para>
            </summary>
        </member>
        <member name="T:_3DRadSpaceDll.ProjectType">
            <summary>
            Project types for the editor.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.ProjectType.TwoDimensional">
            <summary>
            Strictly 2D.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.ProjectType.ThreeDimensional">
            <summary>
            3D
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.ProjectType.ScriptOnly">
            <summary>
            Code only
            </summary>
        </member>
        <member name="T:_3DRadSpaceDll.ProjectBinary">
            <summary>
            Loads and saved projects in binary format
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.ProjectBinary.Load(System.String)">
            <summary>
            Loads a project.
            </summary>
            <param name="filename">Absolute path.</param>
            <returns></returns>
        </member>
        <member name="M:_3DRadSpaceDll.ProjectBinary.Save(System.String,System.Collections.Generic.List{_3DRadSpaceDll.GameObject})">
            <summary>
            
            </summary>
            <param name="file"></param>
            <param name="list"></param>
        </member>
        <member name="T:_3DRadSpaceDll.Script">
            <summary>
            C# Script class.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.Script._assembly">
            <summary>
            Compiled CLR assembly
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.Script._script_object">
            <summary>
            Instance of the user-scripted class.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Script.CompilationStatus">
            <summary>
            Checks if compilation succeded.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Script.CompilationTime">
            <summary>
            Time for compilation.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.Script.Path">
            <summary>
            Path to source code to be compiled and run.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.Script.ClassName">
            <summary>
            Script entry class.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Script.#ctor(System.String,System.Boolean,System.String,System.String)">
            <summary>
            Script object main constructor.
            </summary>
            <param name="name">Object name</param>
            <param name="enabled">Checks if scripts will be run</param>
            <param name="scriptpath">Path to the file that will be compiled.</param>
            <param name="ClassN">Class name.</param>
        </member>
        <member name="M:_3DRadSpaceDll.Script.#ctor">
            <summary>
            Empty Script object constructor.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Script.Compile(System.Boolean)">
            <summary>
            Compiles code in order to make it usable.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Script.Load(Microsoft.Xna.Framework.Content.ContentManager)">
            <summary>
            Initiailze the object by compiling the linked source.
            </summary>
            <param name="content">Content manager. Not used.</param>
        </member>
        <member name="M:_3DRadSpaceDll.Script.Start">
            <summary>
            Executes [ClassName].Start(), where ClassName is part of the the compiled code.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Script.Run(Microsoft.Xna.Framework.Input.MouseState,Microsoft.Xna.Framework.Input.KeyboardState,Microsoft.Xna.Framework.GameTime)">
            <summary>
            Executes [ClassName].Run(), where ClassName is part of the compiled source code.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Script.End">
            <summary>
            Executes [ClassName].End(), where ClassName is part of the compiled source.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Script.Update(Microsoft.Xna.Framework.Input.MouseState,Microsoft.Xna.Framework.Input.KeyboardState,Microsoft.Xna.Framework.GameTime)">
            <summary>
            Runs the script code.
            </summary>
            <param name="mouse">Used by the user if the case.</param>
            <param name="keyboard">Used by the user if the case.</param>
            <param name="time">Used by the user if the case.</param>
        </member>
        <member name="M:_3DRadSpaceDll.Script.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Nullable{Microsoft.Xna.Framework.Matrix},System.Nullable{Microsoft.Xna.Framework.Matrix})">
            <summary>
            Runs the script code dedicated to drawing.
            </summary>
            <param name="spriteBatch">Used by the user if the case.</param>
            <param name="view">User by the user if the case again.</param>
            <param name="projection">User by the user, if the case...</param>
        </member>
        <member name="T:_3DRadSpaceDll.Skinmesh">
            <summary>
            Class for drawing a 3D mesh.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Skinmesh.#ctor(System.String,System.Boolean,System.String,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Boolean,Microsoft.Xna.Framework.BoundingBox,Microsoft.Xna.Framework.BoundingSphere)">
            <summary>
            Creates a new Skinmesh object
            </summary>
            <param name="name">Object's name.</param>
            <param name="active">Checks if the skinmesh will get drawn.</param>
            <param name="resource">Resource name, from the 'root'/Content/ without the xnb extension.</param>
            <param name="position">Object position</param>
            <param name="rotation">Object rotation in Euler Angles measured in radians.</param>
            <param name="scale">Object scale. (1,1,1) is default.</param>
            <param name="fog_affected">Allows or not fogs.</param>
            <param name="box">Bounding box for intersections and collisions.</param>
            <param name="sphere">User-defined bounding sphere for intersections and collisions.</param>
        </member>
        <member name="M:_3DRadSpaceDll.Skinmesh.#ctor">
            <summary>
            Empty Skinmesh constructor;
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Skinmesh.Model">
            <summary>
            The Model itself.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Skinmesh.FogColor">
            <summary>
            Fog effect color. From IEffectFog.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Skinmesh.FogEnabled">
            <summary>
            Checks if the Skinmesh allows fogs.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Skinmesh.FogEnd">
            <summary>
            Fog end distance.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Skinmesh.FogStart">
            <summary>
            Fog start distance.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Skinmesh.FogExists">
            <summary>
            Determines if fog is defined
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Skinmesh.Scale">
            <summary>
            Model scale. Default is (1,1,1).
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Skinmesh.BoundingBox">
            <summary>
            <para>Bounding Box allowing basic hitbox/collision detection.</para>
            <para>Note: Please note that this object doesn't use physics</para>
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Skinmesh.BoundingSphere">
            <summary>
            Custom user defined Bounding Sphere.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Skinmesh.Load(Microsoft.Xna.Framework.Content.ContentManager)">
            <summary>
            Loads the model. Uses Monogame's content pipeline.
            </summary>
            <param name="content">ContentManager from the game instance.</param>
        </member>
        <member name="M:_3DRadSpaceDll.Skinmesh.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Nullable{Microsoft.Xna.Framework.Matrix},System.Nullable{Microsoft.Xna.Framework.Matrix})">
            <summary>
            Draws the mesh.
            </summary>
            <param name="spriteBatch">Not used.</param>
            <param name="view">Necessary for model drawing.</param>
            <param name="projection">Necessary for model drawing.</param>
        </member>
        <member name="M:_3DRadSpaceDll.Skinmesh.EditorDraw(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Nullable{Microsoft.Xna.Framework.Matrix},System.Nullable{Microsoft.Xna.Framework.Matrix})">
            <summary>
            Draws the mesh in the editor. The only difference from Draw() is the missing condition.
            </summary>
            <param name="spriteBatch">Not used.</param>
            <param name="view">View Matrix.</param>
            <param name="projection">Projection Matrix</param>
        </member>
        <member name="P:_3DRadSpaceDll.Skinmesh.TranslationMatrix">
            <summary>
            
            </summary>
        </member>
        <member name="T:_3DRadSpaceDll.Skybox">
            <summary>
            Represents an Skybox object.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Skybox.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Skybox.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Main skybox constructor.
            </summary>
            <param name="name"></param>
            <param name="enabled"></param>
            <param name="path"></param>
        </member>
        <member name="P:_3DRadSpaceDll.Skybox.Size">
            <summary>
            Size of the cube itself.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Skybox.Load(Microsoft.Xna.Framework.Content.ContentManager,Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Loads the skybox.
            
            SKYBOX FILE FORMAT:
            EXTENSION: .sky
            
            First line: PX image
            Second line: PY image
            Third line: PZ image
            Fourth line: NX image
            Fifth line: NY image
            Sixth line: NZ image
            
            </summary>
            <param name="content"></param>
            <param name="gd">GraphicsDevice used to initialize the texture.</param>
        </member>
        <member name="F:_3DRadSpaceDll.Skybox.PX">
            <summary>
            A entire image representing the skybox.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.Skybox.PY">
            <summary>
            A entire image representing the skybox.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.Skybox.PZ">
            <summary>
            A entire image representing the skybox.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.Skybox.NX">
            <summary>
            A entire image representing the skybox.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.Skybox.NY">
            <summary>
            A entire image representing the skybox.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.Skybox.NZ">
            <summary>
            A entire image representing the skybox.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Skybox.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Nullable{Microsoft.Xna.Framework.Matrix},System.Nullable{Microsoft.Xna.Framework.Matrix})">
            <summary>
            Draws the skybox.
            </summary>
            <param name="spriteBatch"></param>
            <param name="view"></param>
            <param name="projection"></param>
        </member>
        <member name="M:_3DRadSpaceDll.Skybox.EditorDraw(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Draws the skybox in the editor - an extra argument is needed.
            </summary>
            <param name="editor_cam_pos"></param>
            <param name="view"></param>
            <param name="projection"></param>
        </member>
        <member name="M:_3DRadSpaceDll.Skybox.LinkAvalableCamera">
            <summary>
            Finds a camera object to link the skybox to.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Skybox.LinkCamera(_3DRadSpaceDll.Camera)">
            <summary>
            Links a camera to the object
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:_3DRadSpaceDll.Skybox.UpdateSize">
            <summary>
            Updates the skyboxes size in case that the linked camera's maximum drawing distance also changed.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Skybox.Dispose">
            <summary>
            Frees the loaded texture.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Skybox.Dispose(System.Boolean)">
            <summary>
            Protected Dispose().
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:_3DRadSpaceDll.SkyColor">
            <summary>
            Colors the screen when screen cleaning is used. 
            <para>Notice the missing Update(), Draw(), EditorDraw() and Load() functions. They aren't used because only the colour is needed.</para>
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.SkyColor.Color">
            <summary>
            The colour itself.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.SkyColor.#ctor(System.String,System.Boolean,Microsoft.Xna.Framework.Color)">
            <summary>
            SkyColor object constructor.
            </summary>
            <param name="name">Object name</param>
            <param name="active">Is the object active?</param>
            <param name="c">Color used for the screen.</param>
        </member>
        <member name="M:_3DRadSpaceDll.SkyColor.#ctor(System.String,System.Boolean)">
            <summary>
            Generates an empty SkyColor object.
            </summary>
            <param name="name">Object name</param>
            <param name="active">Is Object active</param>
        </member>
        <member name="M:_3DRadSpaceDll.SkyColor.#ctor">
            <summary>
            Empty SkyColor constructor.
            </summary>
        </member>
        <member name="T:_3DRadSpaceDll.SoundEffect">
            <summary>
            SoundEffect class. Allows loading and playing sound effects.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.SoundEffect.Sound">
            <summary>
            Sound file. Use SoundInstance to directly access the Microsoft.Xna.Framework.Audio.SoundEffect .
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.SoundEffect.SoundInstance">
            <summary>
            SoundInstance object. Allows playing the sound.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.SoundEffect.Volume">
            <summary>
            Sound volume. Ranges from 0.0f to 1.0f.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.SoundEffect.Pitch">
            <summary>
            Sound pitch. Ranges from -1.0f to 1.0f.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.SoundEffect.Pan">
            <summary>
            Pan / speaker balance.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.SoundEffect.SoundState">
             <summary>
             Gets or sets the current state of the sound.
            <para>Unlike SoundInstance.State, this property can be also set.</para>
            <para>Setting this property to any value will call the Play(), Stop() and Pause() depinding on the value.</para>
             </summary>
        </member>
        <member name="M:_3DRadSpaceDll.SoundEffect.#ctor(System.String,System.Boolean,System.String,System.Single)">
            <summary>
            Main constructor.
            </summary>
            <param name="name"></param>
            <param name="active"></param>
            <param name="resource"></param>
            <param name="volume"></param>
        </member>
        <member name="M:_3DRadSpaceDll.SoundEffect.#ctor">
            <summary>
            Empty SoundEffect constructor.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.SoundEffect.Load(Microsoft.Xna.Framework.Content.ContentManager)">
            <summary>
            Loads the sound
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:_3DRadSpaceDll.SoundEffect.Play">
            <summary>
            Plays the sound.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.SoundEffect.Pause">
            <summary>
            Pauses the sound.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.SoundEffect.Stop">
            <summary>
            Stops the sound
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.SoundEffect.IsPlaying">
            <summary>
            Checks if the sound is playing.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_3DRadSpaceDll.SoundEffect.IsPaused">
            <summary>
            Checks if the sound is paused.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_3DRadSpaceDll.SoundEffect.IsStopped">
            <summary>
            Checks if the sound is stopped.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_3DRadSpaceDll.SoundEffect.Trigger">
            <summary>
            Plays the sound.
            </summary>
        </member>
        <member name="T:_3DRadSpaceDll.SoundSource">
            <summary>
            Allows playing sounds located in a 3D envoirement. 
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.SoundSource.#ctor">
            <summary>
            Empty SoundSource constructor.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.SoundSource.#ctor(System.String,System.Boolean,System.String,System.Single,Microsoft.Xna.Framework.Vector3,_3DRadSpaceDll.Camera,System.Single,System.Single,System.Single)">
            <summary>
            Main SoundSource constructor.
            </summary>
            <param name="name">Object Name.</param>
            <param name="enabled">Is playing sounds allowed?</param>
            <param name="resource">Resource file</param>
            <param name="volume">Volume ranging from 0.0 to 1.0</param>
            <param name="position">Sound source position.</param>
            <param name="listener">Camera used as a listener.</param>
            <param name="pitch">Sound pitch ranging from -1.0f to 1.0f</param>
            <param name="pan">Headphones balance, ranging from -1.0f to 1.0f</param>
            <param name="doppler">Doppler effect scale.</param>
        </member>
        <member name="P:_3DRadSpaceDll.SoundSource.Position">
            <summary>
            Defines the Sound's location.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.SoundSource.ModelMarker">
            <summary>
            Model used in editor.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.SoundSource.DopplerScale">
            <summary>
            Gets or set a scale applied to the doppler effect between the listener LinkedCam and the sound source ( Position )
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.SoundSource.LinkedCam">
            <summary>
            Camera object used as listener.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.SoundSource.SetListenerPosition(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Sets the listener's position.
            </summary>
            <param name="pos">Position.</param>
            <param name="up">Up normalized vector.</param>
        </member>
        <member name="M:_3DRadSpaceDll.SoundSource.EditorDraw(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Nullable{Microsoft.Xna.Framework.Matrix},System.Nullable{Microsoft.Xna.Framework.Matrix})">
            <summary>
            Draws a model marking the sound effect's location.
            </summary>
            <param name="spriteBatch"></param>
            <param name="view"></param>
            <param name="projection"></param>
        </member>
        <member name="T:_3DRadSpaceDll.onClick">
            <summary>
            Event is invoked when the object is being clicked.
            </summary>
            <param name="sender">The clicked object</param>
            <param name="mouse">Mouse information.</param>
        </member>
        <member name="T:_3DRadSpaceDll.Sprite">
            <summary>
            2D Screen images class.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Sprite.#ctor(System.String,System.Boolean,System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single,System.Nullable{Microsoft.Xna.Framework.Rectangle},Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Int32)">
            <summary>
            Sprite object constructor.
            </summary>
            <param name="name">Object Name</param>
            <param name="active">Is this object active?</param>
            <param name="resource">Resource image.</param>
            <param name="pos">2D Position.</param>
            <param name="scale">Size of the sprite.</param>
            <param name="center_rot">Center of rotation.</param>
            <param name="rotation">Rotation in radians(?)</param>
            <param name="section">Sprite sheet section.</param>
            <param name="mask">Mask Color.</param>
            <param name="effects">Flipping effects.</param>
            <param name="layer">Drawing layer</param>
        </member>
        <member name="M:_3DRadSpaceDll.Sprite.#ctor">
            <summary>
            Empty Sprite constructor.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Sprite.IsUsedByCam2D">
            <summary>
            Checks if this object is being used by a Camera2D.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Sprite.Texture">
            <summary>
            Texture used to draw the sprite.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Sprite.Size">
            <summary>
            Size of the sprite.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Sprite.Rotation">
            <summary>
            Rotation of the sprite in radians.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Sprite.Position">
            <summary>
            Position of the sprite
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Sprite.SpriteSheetSection">
            <summary>
            Section of a sprite sheet. If not used, set this to null;
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Sprite.Mask">
            <summary>
            Color mask.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Sprite.Center">
            <summary>
            Center of rotation.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Sprite.Effects">
            <summary>
            Effects applied to the sprite.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Sprite.Layer">
            <summary>
            Layer depth of the sprite.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Sprite.Load(Microsoft.Xna.Framework.Content.ContentManager,Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Loads the texture. Notice this is not overloading the function from the GameObject class.
            </summary>
            <param name="content">Content manager.</param>
            <param name="gd">Graphics device. Expected to be given by the editor.</param>
        </member>
        <member name="M:_3DRadSpaceDll.Sprite.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Nullable{Microsoft.Xna.Framework.Matrix},System.Nullable{Microsoft.Xna.Framework.Matrix})">
            <summary>
            Draws the sprite.
            </summary>
            <param name="spriteBatch">spriteBatch used for drawing.</param>
            <param name="view">Use a null value.</param>
            <param name="projection">Use a null value.</param>
        </member>
        <member name="M:_3DRadSpaceDll.Sprite.EditorDraw(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Nullable{Microsoft.Xna.Framework.Matrix},System.Nullable{Microsoft.Xna.Framework.Matrix})">
            <summary>
            Drawing the sprite but for the editor.
            </summary>
            <param name="spriteBatch"></param>
            <param name="view"></param>
            <param name="projection"></param>
        </member>
        <member name="M:_3DRadSpaceDll.Sprite.Update(Microsoft.Xna.Framework.Input.MouseState,Microsoft.Xna.Framework.Input.KeyboardState,Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates the sprite (if it is clicked)
            </summary>
            <param name="mouse"></param>
            <param name="keyboard"></param>
            <param name="time"></param>
        </member>
        <member name="E:_3DRadSpaceDll.Sprite.OnClick">
            <summary>
            Event called if the sprite is clicked
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Sprite.Dispose">
            <summary>
            Frees the loaded texture.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Sprite.Dispose(System.Boolean)">
            <summary>
            Protected Dispose().
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:_3DRadSpaceDll.TextPrint">
            <summary>
            Class for drawing 2D Texts.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.TextPrint.#ctor(System.String,System.Boolean,System.String,System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
            <summary>
            TextPrint constructor.
            </summary>
            <param name="name">Object name</param>
            <param name="active">Will this object draw?</param>
            <param name="text">Text to print</param>
            <param name="pos">Position on the screen</param>
            <param name="size">Size</param>
            <param name="rotation">Rotation in radians(?)</param>
            <param name="font">Font used for drawing.</param>
            <param name="cof">Center of rotation.</param>
            <param name="col">Text color.</param>
            <param name="effects">Flipping options.</param>
            <param name="layer">Depth layer.</param>
        </member>
        <member name="M:_3DRadSpaceDll.TextPrint.#ctor">
            <summary>
            Empty TextPrint constructor.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.TextPrint.Text">
            <summary>
            Text to be drawn
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.TextPrint.Position">
            <summary>
            Position in 2D space of the text.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.TextPrint.Size">
            <summary>
            Size of the text.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.TextPrint.Rotation">
            <summary>
            Text rotation.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.TextPrint.Font">
            <summary>
            Font used for drawing the text.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.TextPrint.Color">
            <summary>
            Text Color.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.TextPrint.Center">
            <summary>
            Center of rotation.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.TextPrint.Effects">
            <summary>
            Allows flipping
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.TextPrint.Layer">
            <summary>
            Depth layer.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.TextPrint.Load(Microsoft.Xna.Framework.Content.ContentManager)">
            <summary>
            Loads the font.
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:_3DRadSpaceDll.TextPrint.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Nullable{Microsoft.Xna.Framework.Matrix},System.Nullable{Microsoft.Xna.Framework.Matrix})">
            <summary>
            Draws the text to the game screen.
            </summary>
            <param name="spriteBatch">SpriteBatch used for drawing the text.</param>
            <param name="view">Not used.</param>
            <param name="projection">Not used.</param>
        </member>
        <member name="M:_3DRadSpaceDll.TextPrint.EditorDraw(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Nullable{Microsoft.Xna.Framework.Matrix},System.Nullable{Microsoft.Xna.Framework.Matrix})">
            <summary>
            Draws the text for the editor.
            </summary>
            <param name="spriteBatch"></param>
            <param name="view"></param>
            <param name="projection"></param>
        </member>
        <member name="M:_3DRadSpaceDll.TextPrint.Dispose">
            <summary>
            Disposes the font's texture
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.TextPrint.Dispose(System.Boolean)">
            <summary>
            Not really needed, MG's pipeline takes care of the SpriteFont instance.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:_3DRadSpaceDll.TimerEvent">
            <summary>
            Raised everytime the timer exceeds the period.
            </summary>
            <param name="sender">Timer object.</param>
            <param name="total_time">Total time passed since the creation of the timer object.</param>
        </member>
        <member name="T:_3DRadSpaceDll.Timer">
            <summary>
            Executes an event everytime a 'period' passes for a number of times.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Timer.#ctor">
            <summary>
            Empty Timer constructor.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Timer.#ctor(System.String,System.Boolean,System.UInt32,System.UInt32)">
            <summary>
            Main Timer constructor.
            </summary>
            <param name="name">Name of the object.</param>
            <param name="enabled">If the timer will execute.</param>
            <param name="period">Timer period.</param>
            <param name="repetitions">How much time the event will execute. Use uint.MaxValue to represent ∞ . </param>
        </member>
        <member name="F:_3DRadSpaceDll.Timer.Period">
            <summary>
            Defined the time in milliseconds between the timer event executions.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.Timer.Repetitions">
            <summary>
            Defines how many times the event will get called.
            <para> Use uint.MaxValue Infinity to represent ∞ (infinity) </para>
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Timer.TotalTime">
            <summary>
            Counts the time passed.
            <para>Maximum value is Period * Repetitions</para>
            <para>NOTE: Unsigned integer overflows will occur if the Period is a value representing ∞ ( uint.MaxValue )</para>
            </summary>
        </member>
        <member name="E:_3DRadSpaceDll.Timer.OnTimerRepetition">
            <summary>
            Raised everytime a repetition is complete.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.Timer.Infinity">
            <summary>
            Represents ∞
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.Timer.Behiavours">
            <summary>
            The event defined in the editor.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Timer.Update(Microsoft.Xna.Framework.Input.MouseState,Microsoft.Xna.Framework.Input.KeyboardState,Microsoft.Xna.Framework.GameTime)">
            <summary>
            
            </summary>
            <param name="mouse"></param>
            <param name="keyboard"></param>
            <param name="time"></param>
        </member>
    </members>
</doc>
