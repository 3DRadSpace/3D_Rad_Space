<?xml version="1.0"?>
<doc>
    <assembly>
        <name>3DRadSpaceDll</name>
    </assembly>
    <members>
        <member name="T:_3DRadSpaceDll.Camera">
            <summary>
            Camera class.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Camera.#ctor(System.String,System.Boolean,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Single,System.Single)">
            <summary>
            Camera object constructor.
            </summary>
            <param name="name">Objet name.</param>
            <param name="Enabled">If camera is enabled.</param>
            <param name="Pos">Position</param>
            <param name="Target">Camera look at.</param>
            <param name="UpDir">Camera up direction.</param>
            <param name="FOV">Field of view in radians</param>
            <param name="nearplane">Minumum draw distance</param>
            <param name="farplane">Maximum draw distance</param>
        </member>
        <member name="M:_3DRadSpaceDll.Camera.#ctor(System.String,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Single,System.Single)">
            <summary>
            Camera constructor for the editor.
            </summary>
            <param name="name"></param>
            <param name="Pos"></param>
            <param name="Target"></param>
            <param name="FOV"></param>
            <param name="nearplane"></param>
            <param name="farplane"></param>
        </member>
        <member name="F:_3DRadSpaceDll.Camera.model">
            <summary>
            Expected to be loaded by the game editor.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Camera.EditorDraw(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Drawing code for the editor.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.Camera.CameraTarget">
            <summary>
            Look at point.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.Camera.CameraRotation">
            <summary>
            Camera Rotation. (0,1,0) Is the default.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.Camera.FOV">
            <summary>
            Fielf of view (Measured in radians).
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.Camera.ScreenSize">
            <summary>
            Screen size. Used to calculate aspect ratio.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Camera.SetFOVDegrees(System.Single)">
            <summary>
            Sets the FOV with a degree value
            </summary>
            <param name="deg">Degrees</param>
        </member>
        <member name="M:_3DRadSpaceDll.Camera.GetFOVDegrees">
            <summary>
            Converts FOV to degrees.
            </summary>
            <returns>Degrees</returns>
        </member>
        <member name="F:_3DRadSpaceDll.Camera.MinDrawDist">
            <summary>
            Near plane distance
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.Camera.MaxDrawDist">
            <summary>
            Maximum drawing distance.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Camera.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Camera drawing for game code.
            </summary>
            <param name="spriteBatch">Not used.</param>
            <param name="view">Uses it's own view;</param>
            <param name="projection"></param>
        </member>
        <member name="T:_3DRadSpaceDll.Camera2D">
            <summary>
            Camera class for 2D projects. Used to draw 2D scenes.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Camera2D.#ctor(System.String,System.Boolean,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Camera2D constructor.
            </summary>
            <param name="name">Object name</param>
            <param name="enabled">Is the camera drawing the scene?</param>
            <param name="Pos">Position</param>
            <param name="Size">Size</param>
        </member>
        <member name="M:_3DRadSpaceDll.Camera2D.Add(System.Object)">
            <summary>
            Adds an object to be drawn by the camera.
            </summary>
            <param name="obj">Object to be added.</param>
        </member>
        <member name="F:_3DRadSpaceDll.Camera2D.DrawingBounds">
            <summary>
            Camera drawing bounds.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Camera2D.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Nullable{Microsoft.Xna.Framework.Matrix},System.Nullable{Microsoft.Xna.Framework.Matrix})">
            <summary>
            Draws the entire scene.
            </summary>
            <param name="spriteBatch">Game's sprite batch.</param>
            <param name="view">Not used, use the null value.</param>
            <param name="projection">Not used, use the null value.</param>
        </member>
        <member name="T:_3DRadSpaceDll.Game">
            <summary>
            Contains methods and fields for managing game objects.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.Game.GameObjects">
            <summary>
            Contains the objects. 
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Game.DrawModel(Microsoft.Xna.Framework.Graphics.Model,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Draws a 3D Model.
            </summary>
            <param name="model">3D Model</param>
            <param name="world">Scale*Rotaion*Position Matrix</param>
            <param name="view">View matrix</param>
            <param name="projection">Projection Matrix</param>
        </member>
        <member name="M:_3DRadSpaceDll.Game.FindObject(System.Int32)">
            <summary>
            Finds an objects after it's id.
            </summary>
            <param name="i">Numeric indentifier.</param>
            <returns>Returns the found object.</returns>
        </member>
        <member name="T:_3DRadSpaceDll.onDraw">
            <summary>
            Called when drawing the object
            </summary>
            <param name="drawn">The drawn object. Conversion will be needed.</param>
            <param name="spriteBatch">SpriteBatch used for drawing 2D objects</param>
            <param name="view">View Matrix used for 3D model drawing</param>
            <param name="projection">Projection Matrix used for 3D model drawing</param>
        </member>
        <member name="T:_3DRadSpaceDll.onUpdate">
            <summary>
            Called when updating.
            </summary>
            <param name="updated">The updated object</param>
            <param name="mouse">Mouse inputs</param>
            <param name="keyboard">Keyboard inputs</param>
            <param name="time">Game time input</param>
        </member>
        <member name="T:_3DRadSpaceDll.onObjectCreate">
            <summary>
            Called when a object is being created in the constructor function.
            </summary>
            <param name="obj">The created object</param>
        </member>
        <member name="T:_3DRadSpaceDll.onObjectDestroy">
            <summary>
            Called when a object is being removed.
            </summary>
            <param name="obj">The removed object</param>
        </member>
        <member name="T:_3DRadSpaceDll.onObjectLoad">
            <summary>
            Called when a object resource is being loaded.
            </summary>
            <param name="obj">Object</param>
        </member>
        <member name="T:_3DRadSpaceDll.onObjectUnload">
            <summary>
            Called when a object is being unloaded.
            </summary>
            <param name="obj">Object to be unloaded</param>
        </member>
        <member name="T:_3DRadSpaceDll.GameObject">
            <summary>
            Base class for all 3DRadSpace objects.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.GameObject.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.GameObject.Name">
            <summary>
            Object Name
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.GameObject.Enabled">
            <summary>
            Checks if object is enabled.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.GameObject.Hidden">
            <summary>
            Checks if object is being drawn.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.GameObject.Position">
            <summary>
            Object position
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.GameObject.Rotation">
            <summary>
            Rotation in a Euler angles system.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.GameObject.RotationQuaternion">
            <summary>
            Rotation in a Quaterion system.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.GameObject.Resource">
            <summary>
            Resource file
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.GameObject.Enable">
            <summary>
            Enables object.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.GameObject.Disable">
            <summary>
            Disables object.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.GameObject.Toggle">
            <summary>
            Switches object on/off state.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.GameObject.Show">
            <summary>
            Shows the object.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.GameObject.Hide">
            <summary>
            Hides the object.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.GameObject.Load(Microsoft.Xna.Framework.Content.ContentManager)">
            <summary>
            Loads the resource(s).
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.GameObject.Free(Microsoft.Xna.Framework.Content.ContentManager)">
            <summary>
            Unloads the resource.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.GameObject.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Nullable{Microsoft.Xna.Framework.Matrix},System.Nullable{Microsoft.Xna.Framework.Matrix})">
            <summary>
            Object Drawing code
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.GameObject.EditorDraw(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Nullable{Microsoft.Xna.Framework.Matrix}@,System.Nullable{Microsoft.Xna.Framework.Matrix}@)">
            <summary>
            Object draw code for the 3DRadSpace editor
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.GameObject.Update(Microsoft.Xna.Framework.Input.MouseState,Microsoft.Xna.Framework.Input.KeyboardState,Microsoft.Xna.Framework.GameTime)">
            <summary>
            Object update logic
            </summary>
        </member>
        <member name="E:_3DRadSpaceDll.GameObject.OnDraw">
            <summary>
            Called when object is being drawn on frame.
            </summary>
        </member>
        <member name="E:_3DRadSpaceDll.GameObject.OnUpdate">
            <summary>
            Called when object is being updated on the update logic loop.
            </summary>
        </member>
        <member name="E:_3DRadSpaceDll.GameObject.OnInitialization">
            <summary>
            Called when object is being created.
            </summary>
        </member>
        <member name="E:_3DRadSpaceDll.GameObject.OnRemoval">
            <summary>
            Called when object is being deleted.
            </summary>
        </member>
        <member name="E:_3DRadSpaceDll.GameObject.OnObjectLoad">
            <summary>
            Called when a object resource is being loaded.
            </summary>
        </member>
        <member name="E:_3DRadSpaceDll.GameObject.OnObjectUnload">
            <summary>
            Called when a object resource is being freed from the RAM memory.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.GameObject.Finalize">
            <summary>
            Object destructor.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.GameObject.op_Implicit(_3DRadSpaceDll.GameObject)~System.Boolean">
            <summary>
            Checks if the object exists. Same as GameObject != null.
            </summary>
            <param name="o">GameObject to check.</param>
        </member>
        <member name="T:_3DRadSpaceDll.Project">
            <summary>
            Project class for reading and saving projects.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Project.Open(System.String)">
            <summary>
            Opens a project
            </summary>
            <param name="filename">File to open</param>
            <returns>Returns the objects.</returns>
        </member>
        <member name="M:_3DRadSpaceDll.Project.Save(System.String)">
            <summary>
            Saves a 3DRSP project
            </summary>
            <param name="filename">File path</param>
        </member>
        <member name="M:_3DRadSpaceDll.Project.Vector2String(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Converts a vector to a string in the format needed for 3DRSP projects
            </summary>
            <param name="pos">3D Vector to be converted</param>
            <returns>The needed string</returns>
        </member>
        <member name="M:_3DRadSpaceDll.Project.Vector2String(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Converts a vector to a string in the format needed for 3DRSP projects
            </summary>
            <param name="pos">2D Vector to be converted</param>
            <returns>The needed string</returns>
        </member>
        <member name="T:_3DRadSpaceDll.ProjectType">
            <summary>
            Project types for the editor.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.ProjectType.TwoDimensional">
            <summary>
            Strictly 2D.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.ProjectType.ThreeDimensional">
            <summary>
            3D
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.ProjectType.ScriptOnly">
            <summary>
            Code only
            </summary>
        </member>
        <member name="T:_3DRadSpaceDll.Script">
            <summary>
            C# Script class.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Script.CompilationStatus">
            <summary>
            Checks if compilation succeded.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Script.CompilationTime">
            <summary>
            Time for compilation.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.Script.Path">
            <summary>
            Path to source code to be compiled and run.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.Script.ClassName">
            <summary>
            Script entry class.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Script.#ctor(System.String,System.Boolean,System.String,System.String)">
            <summary>
            Script constructor.
            </summary>
            <param name="name">Object name</param>
            <param name="enabled">Checks if scripts will be run</param>
            <param name="scriptpath">Path to the file that will be compiled.</param>
            <param name="ClassN">Class name.</param>
        </member>
        <member name="M:_3DRadSpaceDll.Script.Compile(System.Boolean)">
            <summary>
            Compiles code in order to make it usable.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Script.Load(Microsoft.Xna.Framework.Content.ContentManager)">
            <summary>
            Initiailze the object by compiling the linked source.
            </summary>
            <param name="content">Content manager. Not used.</param>
        </member>
        <member name="M:_3DRadSpaceDll.Script.Start">
            <summary>
            Executes [ClassName].Start(), where ClassName is the compiled source.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Script.Run(Microsoft.Xna.Framework.Input.MouseState,Microsoft.Xna.Framework.Input.KeyboardState,Microsoft.Xna.Framework.GameTime)">
            <summary>
            Executes [ClassName].Run(), where ClassName is the compiled source.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Script.End">
            <summary>
            Executes [ClassName].End(), where ClassName is the compiled source.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Script.Update(Microsoft.Xna.Framework.Input.MouseState,Microsoft.Xna.Framework.Input.KeyboardState,Microsoft.Xna.Framework.GameTime)">
            <summary>
            Runs the script code.
            </summary>
            <param name="mouse">Not really used.</param>
            <param name="keyboard">Not really used.</param>
            <param name="time">Not really used.</param>
        </member>
        <member name="T:_3DRadSpaceDll.onClick">
            <summary>
            Event is invoked when the object is being clicked.
            </summary>
            <param name="sender">The clicked object</param>
            <param name="mouse">Mouse information.</param>
        </member>
        <member name="T:_3DRadSpaceDll.Sprite">
            <summary>
            2D Screen images class.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.Sprite.Is3D">
            <summary>
            Checks if this object is being used by a Camera2D.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Sprite.Texture">
            <summary>
            Texture used to draw the sprite.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.Sprite.Size">
            <summary>
            Size of the sprite.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.Sprite.Rotation">
            <summary>
            Rotation of the sprite in radians.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.Sprite.Position">
            <summary>
            Position of the sprite
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.Sprite.SpriteSheetSection">
            <summary>
            Section of a sprite sheet. If not used, set this to null;
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.Sprite.Mask">
            <summary>
            Color mask.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.Sprite.Center">
            <summary>
            Center of rotation.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.Sprite.Effects">
            <summary>
            Effects applied to the sprite.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.Sprite.Layer">
            <summary>
            Layer depth of the sprite.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Sprite.Load(Microsoft.Xna.Framework.Content.ContentManager)">
            <summary>
            Loads the texture.
            </summary>
            <param name="content">Content manager.</param>
        </member>
        <member name="M:_3DRadSpaceDll.Sprite.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Nullable{Microsoft.Xna.Framework.Matrix},System.Nullable{Microsoft.Xna.Framework.Matrix})">
            <summary>
            Draws the sprite.
            </summary>
            <param name="spriteBatch">spriteBatch used for drawing.</param>
            <param name="view">Use a null value.</param>
            <param name="projection">Use a null value.</param>
        </member>
        <member name="M:_3DRadSpaceDll.Sprite.Update(Microsoft.Xna.Framework.Input.MouseState,Microsoft.Xna.Framework.Input.KeyboardState,Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates the sprite (if it is clicked)
            </summary>
            <param name="mouse"></param>
            <param name="keyboard"></param>
            <param name="time"></param>
        </member>
        <member name="E:_3DRadSpaceDll.Sprite.OnClick">
            <summary>
            Event called if the sprite is clicked
            </summary>
        </member>
    </members>
</doc>
