<?xml version="1.0"?>
<doc>
    <assembly>
        <name>3DRadSpaceDll</name>
    </assembly>
    <members>
        <member name="T:_3DRadSpaceDll.Camera">
            <summary>
            3D Camera class. Allows drawing three dimensinal scenes.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Camera.#ctor(System.String,System.Boolean,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Single,System.Single)">
            <summary>
            Camera object constructor.
            </summary>
            <param name="name">Object name.</param>
            <param name="Enabled">If camera is enabled.</param>
            <param name="Pos">Camera position.</param>
            <param name="Rot">Camera rotation. Also used to calculate the target.</param>
            <param name="Targ">Camera Target. The point the camera is looking at.</param>
            <param name="UpDir">Camera up direction.</param>
            <param name="FOV">Field of view in radians.</param>
            <param name="nearplane">Minumum draw distance.</param>
            <param name="farplane">Maximum draw distance.</param>
        </member>
        <member name="M:_3DRadSpaceDll.Camera.#ctor(System.String,System.Boolean,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Single,System.Single)">
            <summary>
            Creates a Camera object with the specified arguments.
            </summary>
            <param name="name">Objet name.</param>
            <param name="Enabled">If camera is enabled.</param>
            <param name="Pos">Position</param>
            <param name="Rot">Camera rotation.Also used to calculate the target.</param>
            <param name="UpDir">Camera up direction.</param>
            <param name="FOV">Field of view in radians</param>
            <param name="nearplane">Minumum draw distance</param>
            <param name="farplane">Maximum draw distance</param>
        </member>
        <member name="M:_3DRadSpaceDll.Camera.#ctor(System.String,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Single,System.Single)">
            <summary>
            Camera constructor used in the editor.
            </summary>
            <param name="name"></param>
            <param name="Pos"></param>
            <param name="Target"></param>
            <param name="FOV"></param>
            <param name="nearplane"></param>
            <param name="farplane"></param>
        </member>
        <member name="M:_3DRadSpaceDll.Camera.#ctor">
            <summary>
            Empty constructor. Values are mostly default.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Camera.model">
            <summary>
            Expected to be loaded by the game editor. Not used in 3DRadSpacePlayer.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.Camera.DeltaPos">
            <summary>
            Difference between 'chased object' and Camera position.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Camera.Load(Microsoft.Xna.Framework.Content.ContentManager)">
            <summary>
            Loads the object. In this cases, initializes the DeltaPos used when the camera is 'chasing' an object.
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:_3DRadSpaceDll.Camera.EditorDraw(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Nullable{Microsoft.Xna.Framework.Matrix},System.Nullable{Microsoft.Xna.Framework.Matrix})">
            <summary>
            Drawing code for the editor.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Camera.CameraTarget">
            <summary>
            Look at point.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Camera.CameraRotation">
            <summary>
            Camera Rotation. This is a normalized 3D Vector (with the lenght equal or lower(?) to 1)
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Camera.FOV">
            <summary>
            Fielf of view (Measured in radians).
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Camera.ScreenSize">
            <summary>
            Screen size. Used to calculate the projection's aspect ratio.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Camera.SetFOVDegrees(System.Single)">
            <summary>
            Sets the FOV with a degree value
            </summary>
            <param name="deg">Degrees</param>
        </member>
        <member name="M:_3DRadSpaceDll.Camera.GetFOVDegrees">
            <summary>
            Converts FOV to degrees.
            </summary>
            <returns>Degrees</returns>
        </member>
        <member name="P:_3DRadSpaceDll.Camera.MinDrawDist">
            <summary>
            Minimum drawing distance. A recommended value is 0.1f.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Camera.MaxDrawDist">
            <summary>
            Maximum drawing distance.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Camera.Update(Microsoft.Xna.Framework.Input.MouseState,Microsoft.Xna.Framework.Input.KeyboardState,Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates the Camera object. In this case, the Camera object is affected by it's 'relationship(s)'.
            </summary>
            <param name="mouse">Not used</param>
            <param name="keyboard">Not used</param>
            <param name="time">Not used</param>
        </member>
        <member name="M:_3DRadSpaceDll.Camera.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Camera drawing for game code. This method doesn't override the GameObject's Draw function. :thinking:
            </summary>
            <param name="spriteBatch">Not used.</param>
            <param name="view">Uses it's own view</param>
            <param name="projection"></param>
        </member>
        <member name="T:_3DRadSpaceDll.Camera2D">
            <summary>
            Camera class for 2D projects. Used to draw 2D scenes.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Camera2D.#ctor(System.String,System.Boolean,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Camera2D constructor.
            </summary>
            <param name="name">Object name</param>
            <param name="enabled">Is the camera drawing the scene?</param>
            <param name="Pos">Position</param>
            <param name="Size">Size</param>
        </member>
        <member name="M:_3DRadSpaceDll.Camera2D.Add(System.Object)">
            <summary>
            Adds an object to be drawn by the camera.
            </summary>
            <param name="obj">Object to be added.</param>
        </member>
        <member name="P:_3DRadSpaceDll.Camera2D.DrawingBounds">
            <summary>
            Camera drawing bounds.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Camera2D.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Nullable{Microsoft.Xna.Framework.Matrix},System.Nullable{Microsoft.Xna.Framework.Matrix})">
            <summary>
            Draws the entire scene.
            </summary>
            <param name="spriteBatch">Game's sprite batch.</param>
            <param name="view">Not used, use the null value.</param>
            <param name="projection">Not used, use the null value.</param>
        </member>
        <member name="T:_3DRadSpaceDll.Fog">
            <summary>
            <para>Fog class. Allows Fog effects on Skinmeshes.</para>
            <para>Notice the missing Draw,EditorDraw and Update functions. The fields and properties are only used.</para>
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Fog.#ctor(System.String,System.Boolean,Microsoft.Xna.Framework.Color,System.Single,System.Single)">
            <summary>
            Fog class constructor.
            </summary>
            <param name="name">Object name</param>
            <param name="enabled">Is the fog effect allowed?</param>
            <param name="color"></param>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="P:_3DRadSpaceDll.Fog.FogColor">
            <summary>
            Fog Color. Implemented from IEffectFog.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Fog.FogEnabled">
            <summary>
            Actually sets this.Enabled. Implemented from IEffectFog.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Fog.FogEnd">
            <summary>
            Fog end distance.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Fog.FogStart">
            <summary>
            Fog start distance.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Fog.Enabled">
            <summary>
            Override of the GameObject.Enable to allow the usage of FogEnabled.
            </summary>
        </member>
        <member name="T:_3DRadSpaceDll.Game">
            <summary>
            Contains methods and fields for managing game objects.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Game.GameObjects">
            <summary>
            Contains the objects. Note this is a System.Collections.Generic.List (a linked list)
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Game.DrawModel(Microsoft.Xna.Framework.Graphics.Model,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,System.Boolean,Microsoft.Xna.Framework.Vector3,System.Single,System.Single)">
            <summary>
            Draws a 3D Model.
            </summary>
            <param name="model">3D Model</param>
            <param name="world">Scale*Rotaion*Position Matrix</param>
            <param name="view">View matrix</param>
            <param name="projection">Projection Matrix</param>
            <param name="FogEnabled">Allows Fog effects on the model</param>
            <param name="FogColor">Fog colour if allowed</param>
            <param name="FogStart">Fog Start Distance</param>
            <param name="FogEnd">Fog End Distance</param>
        </member>
        <member name="M:_3DRadSpaceDll.Game.FindObject(System.Int32)">
            <summary>
            Finds an objects after it's id.
            <para>Time complexity is O(n) since GameObjects is a linked list.</para>
            </summary>
            <param name="i">Numeric indentifier.</param>
            <returns>Returns the found object.</returns>
        </member>
        <member name="M:_3DRadSpaceDll.Game.FindObject(System.String)">
            <summary>
            Finds an objects after it's name. If objects have the same name, the object with the lowest numerical ID will be returned.
            <para>Time complexity in the worst case is about O(n^2)</para>
            </summary>
            <param name="Name">Object's name</param>
            <returns>Returns the object, else null.</returns>
        </member>
        <member name="M:_3DRadSpaceDll.Game.SetObject(System.Int32,System.Object)">
            <summary>
            Sets an object in the list.
            </summary>
            <param name="i">Object unique numeric (ID)entifier / array index
            <para>Time complexity is O(n), since the objects are stored in a linked list.</para>
            </param>
            <param name="obj">Value</param>
        </member>
        <member name="T:_3DRadSpaceDll.onDraw">
            <summary>
            Called when drawing the object
            </summary>
            <param name="drawn">The drawn object. Conversion will be needed.</param>
            <param name="spriteBatch">SpriteBatch used for drawing 2D objects</param>
            <param name="view">View Matrix used for 3D model drawing</param>
            <param name="projection">Projection Matrix used for 3D model drawing</param>
        </member>
        <member name="T:_3DRadSpaceDll.onUpdate">
            <summary>
            Called when updating.
            </summary>
            <param name="updated">The updated object</param>
            <param name="mouse">Mouse inputs</param>
            <param name="keyboard">Keyboard inputs</param>
            <param name="time">Game time input</param>
        </member>
        <member name="T:_3DRadSpaceDll.onObjectCreate">
            <summary>
            Called when a object is being created in the constructor function.
            </summary>
            <param name="obj">The created object</param>
        </member>
        <member name="T:_3DRadSpaceDll.onObjectDestroy">
            <summary>
            Called when a object is being removed.
            </summary>
            <param name="obj">The removed object</param>
        </member>
        <member name="T:_3DRadSpaceDll.onObjectLoad">
            <summary>
            Called when a object resource is being loaded.
            </summary>
            <param name="obj">Object</param>
        </member>
        <member name="T:_3DRadSpaceDll.onObjectUnload">
            <summary>
            Called when a object is being unloaded.
            </summary>
            <param name="obj">Object to be unloaded</param>
        </member>
        <member name="T:_3DRadSpaceDll.GameObject">
            <summary>
            Base class for all 3DRadSpace objects.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.GameObject.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.GameObject.Name">
            <summary>
            Object Name. Used in 
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.GameObject.Enabled">
            <summary>
            Checks if object is enabled.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.GameObject.Hidden">
            <summary>
            Checks if object is being drawn.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.GameObject.Position">
            <summary>
            Object position
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.GameObject.Rotation">
            <summary>
            Rotation in a Euler angles system.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.GameObject.Behiavours">
            <summary>
            Relation with other objects
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.GameObject.RotationQuaternion">
            <summary>
            Rotation in a Quaterion system.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.GameObject.Resource">
            <summary>
            Resource file
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.GameObject.Enable">
            <summary>
            Enables object.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.GameObject.Disable">
            <summary>
            Disables object.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.GameObject.Toggle">
            <summary>
            Switches object on/off state.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.GameObject.Show">
            <summary>
            Shows the object.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.GameObject.Hide">
            <summary>
            Hides the object.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.GameObject.Load(Microsoft.Xna.Framework.Content.ContentManager)">
            <summary>
            Loads the resource(s).
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.GameObject.Free(Microsoft.Xna.Framework.Content.ContentManager)">
            <summary>
            Unloads the resource.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.GameObject.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Nullable{Microsoft.Xna.Framework.Matrix},System.Nullable{Microsoft.Xna.Framework.Matrix})">
            <summary>
            Object Drawing code
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.GameObject.EditorDraw(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Nullable{Microsoft.Xna.Framework.Matrix},System.Nullable{Microsoft.Xna.Framework.Matrix})">
            <summary>
            Object draw code for the 3DRadSpace editor
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.GameObject.Update(Microsoft.Xna.Framework.Input.MouseState,Microsoft.Xna.Framework.Input.KeyboardState,Microsoft.Xna.Framework.GameTime)">
            <summary>
            Object update logic
            </summary>
        </member>
        <member name="E:_3DRadSpaceDll.GameObject.OnDraw">
            <summary>
            Called when object is being drawn on frame.
            </summary>
        </member>
        <member name="E:_3DRadSpaceDll.GameObject.OnUpdate">
            <summary>
            Called when object is being updated on the update logic loop.
            </summary>
        </member>
        <member name="E:_3DRadSpaceDll.GameObject.OnInitialization">
            <summary>
            Called when object is being created.
            </summary>
        </member>
        <member name="E:_3DRadSpaceDll.GameObject.OnRemoval">
            <summary>
            Called when object is being deleted.
            </summary>
        </member>
        <member name="E:_3DRadSpaceDll.GameObject.OnObjectLoad">
            <summary>
            Called when a object resource is being loaded.
            </summary>
        </member>
        <member name="E:_3DRadSpaceDll.GameObject.OnObjectUnload">
            <summary>
            Called when a object resource is being freed from the RAM memory.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.GameObject.Finalize">
            <summary>
            Object destructor.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.GameObject.op_Implicit(_3DRadSpaceDll.GameObject)~System.Boolean">
            <summary>
            Checks if the object exists. Same as GameObject != null.
            </summary>
            <param name="o">GameObject to check.</param>
        </member>
        <member name="M:_3DRadSpaceDll.GameObject.ToString">
            <summary>
            Returns the object's name
            </summary>
            <returns>the object's name</returns>
        </member>
        <member name="T:_3DRadSpaceDll.ObjectBehiavour">
            <summary>
            Specifies object relationships with other ones.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.ObjectBehiavour.ObjectID">
            <summary>
            Object Identifier for the 'child' object
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.ObjectBehiavour.BehiavourID">
            <summary>
            Behiavour identifier. 0 is always default.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.ObjectBehiavour.#ctor(System.Int32,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="ID">Object identifier</param>
            <param name="beh">Behiavour ID.</param>
        </member>
        <member name="T:_3DRadSpaceDll.Project">
            <summary>
            Project class for reading and saving projects.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Project.type">
            <summary>
            Type of the project to open.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Project.Open(System.String)">
            <summary>
            Opens a project
            </summary>
            <param name="filename">File to open</param>
            <returns>Returns the objects.</returns>
        </member>
        <member name="M:_3DRadSpaceDll.Project.Save(System.String)">
            <summary>
            Saves a 3DRSP project
            </summary>
            <param name="filename">File path</param>
        </member>
        <member name="M:_3DRadSpaceDll.Project.Vector2String(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Converts a vector to a string in the format needed for 3DRSP projects
            </summary>
            <param name="pos">3D Vector to be converted</param>
            <returns>The needed string</returns>
        </member>
        <member name="M:_3DRadSpaceDll.Project.Vector2String(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Converts a vector to a string in the format needed for 3DRSP projects
            </summary>
            <param name="pos">2D Vector to be converted</param>
            <returns>The needed string</returns>
        </member>
        <member name="T:_3DRadSpaceDll.ProjectType">
            <summary>
            Project types for the editor.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.ProjectType.TwoDimensional">
            <summary>
            Strictly 2D.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.ProjectType.ThreeDimensional">
            <summary>
            3D
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.ProjectType.ScriptOnly">
            <summary>
            Code only
            </summary>
        </member>
        <member name="T:_3DRadSpaceDll.Script">
            <summary>
            C# Script class.
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.Script._assembly">
            <summary>
            Compiled CLR assembly
            </summary>
        </member>
        <member name="F:_3DRadSpaceDll.Script._script_object">
            <summary>
            Instance of the user-scripted class.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Script.CompilationStatus">
            <summary>
            Checks if compilation succeded.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Script.CompilationTime">
            <summary>
            Time for compilation.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Script.Path">
            <summary>
            Path to source code to be compiled and run.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Script.ClassName">
            <summary>
            Script entry class.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Script.#ctor(System.String,System.Boolean,System.String,System.String)">
            <summary>
            Script object main constructor.
            </summary>
            <param name="name">Object name</param>
            <param name="enabled">Checks if scripts will be run</param>
            <param name="scriptpath">Path to the file that will be compiled.</param>
            <param name="ClassN">Class name.</param>
        </member>
        <member name="M:_3DRadSpaceDll.Script.Compile(System.Boolean)">
            <summary>
            Compiles code in order to make it usable.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Script.Load(Microsoft.Xna.Framework.Content.ContentManager)">
            <summary>
            Initiailze the object by compiling the linked source.
            </summary>
            <param name="content">Content manager. Not used.</param>
        </member>
        <member name="M:_3DRadSpaceDll.Script.Start">
            <summary>
            Executes [ClassName].Start(), where ClassName is part of the the compiled code.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Script.Run(Microsoft.Xna.Framework.Input.MouseState,Microsoft.Xna.Framework.Input.KeyboardState,Microsoft.Xna.Framework.GameTime)">
            <summary>
            Executes [ClassName].Run(), where ClassName is part of the compiled source code.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Script.End">
            <summary>
            Executes [ClassName].End(), where ClassName is part of the compiled source.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Script.Update(Microsoft.Xna.Framework.Input.MouseState,Microsoft.Xna.Framework.Input.KeyboardState,Microsoft.Xna.Framework.GameTime)">
            <summary>
            Runs the script code.
            </summary>
            <param name="mouse">Used by the user if the case.</param>
            <param name="keyboard">Used by the user if the case.</param>
            <param name="time">Used by the user if the case.</param>
        </member>
        <member name="M:_3DRadSpaceDll.Script.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Nullable{Microsoft.Xna.Framework.Matrix},System.Nullable{Microsoft.Xna.Framework.Matrix})">
            <summary>
            Runs the script code dedicated to drawing.
            </summary>
            <param name="spriteBatch">Used by the user if the case.</param>
            <param name="view">User by the user if the case again.</param>
            <param name="projection">User by the user, if the case...</param>
        </member>
        <member name="T:_3DRadSpaceDll.Skinmesh">
            <summary>
            Class for drawing a 3D mesh.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Skinmesh.#ctor(System.String,System.Boolean,System.String,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Boolean,Microsoft.Xna.Framework.BoundingBox,Microsoft.Xna.Framework.BoundingSphere)">
            <summary>
            Creates a new Skinmesh object
            </summary>
            <param name="name">Object's name.</param>
            <param name="active">Checks if the skinmesh will get drawn.</param>
            <param name="resource">Resource name, from the 'root'/Content/ without the xnb extension.</param>
            <param name="position">Object position</param>
            <param name="rotation">Object rotation in Euler Angles measured in radians.</param>
            <param name="scale">Object scale. (1,1,1) is default.</param>
            <param name="fog_affected">Allows or not fogs.</param>
            <param name="box">Bounding box for intersections and collisions.</param>
            <param name="sphere">User-defined bounding sphere for intersections and collisions.</param>
        </member>
        <member name="P:_3DRadSpaceDll.Skinmesh.Model">
            <summary>
            The Model itself.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Skinmesh.FogColor">
            <summary>
            Fog effect color. From IEffectFog.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Skinmesh.FogEnabled">
            <summary>
            Checks if the Skinmesh allows fogs.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Skinmesh.FogEnd">
            <summary>
            Fog end distance.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Skinmesh.FogStart">
            <summary>
            Fog start distance.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Skinmesh.Scale">
            <summary>
            Model scale. Default is (1,1,1).
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Skinmesh.BoundingBox">
            <summary>
            <para>Bounding Box allowing basic hitbox/collision detection.</para>
            <para>Note: Please note that this object doesn't use physics</para>
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Skinmesh.BoundingSphere">
            <summary>
            Custom user defined Bounding Sphere.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Skinmesh.Load(Microsoft.Xna.Framework.Content.ContentManager)">
            <summary>
            Loads the model. Uses Monogame's content pipeline.
            </summary>
            <param name="content">ContentManager from the game instance.</param>
        </member>
        <member name="M:_3DRadSpaceDll.Skinmesh.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Nullable{Microsoft.Xna.Framework.Matrix},System.Nullable{Microsoft.Xna.Framework.Matrix})">
            <summary>
            Draws the mesh.
            </summary>
            <param name="spriteBatch">Not used.</param>
            <param name="view">Necessary for model drawing.</param>
            <param name="projection">Necessary for model drawing.</param>
        </member>
        <member name="M:_3DRadSpaceDll.Skinmesh.EditorDraw(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Nullable{Microsoft.Xna.Framework.Matrix},System.Nullable{Microsoft.Xna.Framework.Matrix})">
            <summary>
            Draws the mesh in the editor. The only difference from Draw() is the missing condition.
            </summary>
            <param name="spriteBatch">Not used.</param>
            <param name="view">View Matrix.</param>
            <param name="projection">Projection Matrix</param>
        </member>
        <member name="T:_3DRadSpaceDll.SkyColor">
            <summary>
            Colors the screen when screen cleaning is used. 
            <para>Notice the missing Update(), Draw(), EditorDraw() and Load() functions. They aren't used because only the colour is needed.</para>
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.SkyColor.Color">
            <summary>
            The colour itself.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.SkyColor.#ctor(System.String,System.Boolean,Microsoft.Xna.Framework.Color)">
            <summary>
            SkyColor object constructor.
            </summary>
            <param name="name">Object name</param>
            <param name="active">Is the object active?</param>
            <param name="c">Color used for the screen.</param>
        </member>
        <member name="M:_3DRadSpaceDll.SkyColor.#ctor(System.String,System.Boolean)">
            <summary>
            Generates an empty SkyColor object.
            </summary>
            <param name="name">Object name</param>
            <param name="active">Is Object active</param>
        </member>
        <member name="M:_3DRadSpaceDll.SkyColor.GetColor">
            <summary>
            Gets the color.
            <para>Returns null if the object is inactive, otherwise returns this.Color .</para>
            </summary>
            <returns>Returns null if the object is inactive, otherwise returns this.Color .</returns>
        </member>
        <member name="T:_3DRadSpaceDll.SoundEffect">
            <summary>
            SoundEffect class. Allows loading and playing sound effects.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.SoundEffect.Sound">
            <summary>
            Sound file. Use <seealso cref="P:_3DRadSpaceDll.SoundEffect.SoundInstance"/> to directly access the <seealso cref="T:Microsoft.Xna.Framework.Audio.SoundEffect"/>.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.SoundEffect.SoundInstance">
            <summary>
            SoundInstance object. Allows playing the sound.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.SoundEffect.Volume">
            <summary>
            Sound volume. Ranges from 0.0f to 1.0f.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.SoundEffect.Picth">
            <summary>
            Sound pitch. Ranges from -1.0f to 1.0f.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.SoundEffect.Pan">
            <summary>
            Pan / speaker balance.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.SoundEffect.SoundState">
             <summary>
             Gets or sets the current state of the sound.
            <para>Unlike SoundInstance.State, this property can be also set.</para>
            <para>Setting this property to any value will call the <seealso cref="M:_3DRadSpaceDll.SoundEffect.Play"/>, <seealso cref="M:_3DRadSpaceDll.SoundEffect.Stop"/> and <seealso cref="M:_3DRadSpaceDll.SoundEffect.Pause"/> depinding on the value.</para>
             </summary>
        </member>
        <member name="M:_3DRadSpaceDll.SoundEffect.#ctor(System.String,System.Boolean,System.String,System.Single)">
            <summary>
            Main constructor.
            </summary>
            <param name="name"></param>
            <param name="active"></param>
            <param name="resource"></param>
            <param name="volume"></param>
        </member>
        <member name="M:_3DRadSpaceDll.SoundEffect.Load(Microsoft.Xna.Framework.Content.ContentManager)">
            <summary>
            Loads the sound
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:_3DRadSpaceDll.SoundEffect.Play">
            <summary>
            Plays the sound.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.SoundEffect.Pause">
            <summary>
            Pauses the sound.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.SoundEffect.Stop">
            <summary>
            Stops the sound
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.SoundEffect.IsPlaying">
            <summary>
            Checks if the sound is playing.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_3DRadSpaceDll.SoundEffect.IsPaused">
            <summary>
            Checks if the sound is paused.
            </summary>
            <returns></returns>
        </member>
        <member name="M:_3DRadSpaceDll.SoundEffect.IsStopped">
            <summary>
            Checks if the sound is stopped.
            </summary>
            <returns></returns>
        </member>
        <member name="T:_3DRadSpaceDll.onClick">
            <summary>
            Event is invoked when the object is being clicked.
            </summary>
            <param name="sender">The clicked object</param>
            <param name="mouse">Mouse information.</param>
        </member>
        <member name="T:_3DRadSpaceDll.Sprite">
            <summary>
            2D Screen images class.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Sprite.#ctor(System.String,System.Boolean,System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single,System.Nullable{Microsoft.Xna.Framework.Rectangle},Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Int32)">
            <summary>
            Sprite object constructor.
            </summary>
            <param name="name">Object Name</param>
            <param name="active">Is this object active?</param>
            <param name="resource">Resource image.</param>
            <param name="pos">2D Position.</param>
            <param name="scale">Size of the sprite.</param>
            <param name="center_rot">Center of rotation.</param>
            <param name="rotation">Rotation in radians(?)</param>
            <param name="section">Sprite sheet section.</param>
            <param name="mask">Mask Color.</param>
            <param name="effects">Flipping effects.</param>
            <param name="layer">Drawing layer</param>
        </member>
        <member name="P:_3DRadSpaceDll.Sprite.IsUsedByCam2D">
            <summary>
            Checks if this object is being used by a Camera2D.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Sprite.Texture">
            <summary>
            Texture used to draw the sprite.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Sprite.Size">
            <summary>
            Size of the sprite.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Sprite.Rotation">
            <summary>
            Rotation of the sprite in radians.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Sprite.Position">
            <summary>
            Position of the sprite
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Sprite.SpriteSheetSection">
            <summary>
            Section of a sprite sheet. If not used, set this to null;
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Sprite.Mask">
            <summary>
            Color mask.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Sprite.Center">
            <summary>
            Center of rotation.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Sprite.Effects">
            <summary>
            Effects applied to the sprite.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.Sprite.Layer">
            <summary>
            Layer depth of the sprite.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Sprite.Load(Microsoft.Xna.Framework.Content.ContentManager,Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Loads the texture. Notice this is not overloading the function from the GameObject class.
            </summary>
            <param name="content">Content manager.</param>
            <param name="gd">Graphics device. Expected to be given by the editor.</param>
        </member>
        <member name="M:_3DRadSpaceDll.Sprite.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Nullable{Microsoft.Xna.Framework.Matrix},System.Nullable{Microsoft.Xna.Framework.Matrix})">
            <summary>
            Draws the sprite.
            </summary>
            <param name="spriteBatch">spriteBatch used for drawing.</param>
            <param name="view">Use a null value.</param>
            <param name="projection">Use a null value.</param>
        </member>
        <member name="M:_3DRadSpaceDll.Sprite.EditorDraw(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Nullable{Microsoft.Xna.Framework.Matrix},System.Nullable{Microsoft.Xna.Framework.Matrix})">
            <summary>
            Drawing the sprite but for the editor.
            </summary>
            <param name="spriteBatch"></param>
            <param name="view"></param>
            <param name="projection"></param>
        </member>
        <member name="M:_3DRadSpaceDll.Sprite.Update(Microsoft.Xna.Framework.Input.MouseState,Microsoft.Xna.Framework.Input.KeyboardState,Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates the sprite (if it is clicked)
            </summary>
            <param name="mouse"></param>
            <param name="keyboard"></param>
            <param name="time"></param>
        </member>
        <member name="E:_3DRadSpaceDll.Sprite.OnClick">
            <summary>
            Event called if the sprite is clicked
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Sprite.Dispose">
            <summary>
            Frees the loaded texture.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.Sprite.Dispose(System.Boolean)">
            <summary>
            Protected Dispose().
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:_3DRadSpaceDll.TextPrint">
            <summary>
            Class for drawing 2D Texts.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.TextPrint.#ctor(System.String,System.Boolean,System.String,System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Int32)">
            <summary>
            TextPrint constructor.
            </summary>
            <param name="name">Object name</param>
            <param name="active">Will this object draw?</param>
            <param name="text">Text to print</param>
            <param name="pos">Position on the screen</param>
            <param name="size">Size</param>
            <param name="rotation">Rotation in radians(?)</param>
            <param name="font">Font used for drawing.</param>
            <param name="cof">Center of rotation.</param>
            <param name="col">Text color.</param>
            <param name="effects">Flipping options.</param>
            <param name="layer">Depth layer.</param>
        </member>
        <member name="P:_3DRadSpaceDll.TextPrint.Text">
            <summary>
            Text to be drawn
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.TextPrint.Position">
            <summary>
            Position in 2D space of the text.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.TextPrint.Size">
            <summary>
            Size of the text.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.TextPrint.Rotation">
            <summary>
            Text rotation.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.TextPrint.Font">
            <summary>
            Font used for drawing the text.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.TextPrint.Color">
            <summary>
            Text Color.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.TextPrint.Center">
            <summary>
            Center of rotation.
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.TextPrint.Effects">
            <summary>
            Allows flipping
            </summary>
        </member>
        <member name="P:_3DRadSpaceDll.TextPrint.Layer">
            <summary>
            Depth layer.
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.TextPrint.Load(Microsoft.Xna.Framework.Content.ContentManager)">
            <summary>
            Loads the font.
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:_3DRadSpaceDll.TextPrint.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Nullable{Microsoft.Xna.Framework.Matrix},System.Nullable{Microsoft.Xna.Framework.Matrix})">
            <summary>
            Draws the text to the game screen.
            </summary>
            <param name="spriteBatch">SpriteBatch used for drawing the text.</param>
            <param name="view">Not used.</param>
            <param name="projection">Not used.</param>
        </member>
        <member name="M:_3DRadSpaceDll.TextPrint.EditorDraw(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Nullable{Microsoft.Xna.Framework.Matrix},System.Nullable{Microsoft.Xna.Framework.Matrix})">
            <summary>
            Draws the text for the editor.
            </summary>
            <param name="spriteBatch"></param>
            <param name="view"></param>
            <param name="projection"></param>
        </member>
        <member name="M:_3DRadSpaceDll.TextPrint.Dispose">
            <summary>
            Disposes the font's texture
            </summary>
        </member>
        <member name="M:_3DRadSpaceDll.TextPrint.Dispose(System.Boolean)">
            <summary>
            Not really needed, MG's pipeline takes care of the SpriteFont instance.
            </summary>
            <param name="disposing"></param>
        </member>
    </members>
</doc>
